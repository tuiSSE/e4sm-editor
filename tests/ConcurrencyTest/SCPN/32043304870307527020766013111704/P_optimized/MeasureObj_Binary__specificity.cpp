/************************************************************

	MeasureObj_Binary__specificity.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_Data.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_AReady.h"
#include "MeasureObj_Act1Ready.h"
#include "MeasureObj_Act2Ready.h"
#include "MeasureObj_A3Ready.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"

MeasureObj_Binary__specificity* measure_Binary__specificity;

MeasureObj_Binary__specificity::MeasureObj_Binary__specificity(NetClass* net) : MeasureObj("Binary_specificity", net, false)
{
}

double MeasureObj_Binary__specificity::measure(double dt=-1)
{
	// Orig Expression: #Binary_tn / (0.00000001 + #Binary_tn + #Binary_fp)
	// C++  Expression: #P000049/ ( 1.0E-8+#P000050+#P000051 ) 
	Place *P000049 = net->getPlace("Binary_tn");
	Place *P000050 = net->getPlace("Binary_tn");
	Place *P000051 = net->getPlace("Binary_fp");

	double rate = (P000049->getMarkingSize()/ ( 1.0E-8+P000050->getMarkingSize()+P000051->getMarkingSize() ) );

	return rate;
}

void MeasureObj_Binary__specificity::accum(const Binding *binding, double weight) {}
MeasureObj_Binary__specificity::~MeasureObj_Binary__specificity()
{
}

