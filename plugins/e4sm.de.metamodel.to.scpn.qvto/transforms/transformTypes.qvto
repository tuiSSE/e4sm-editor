library transformTypes;
import SCPNConstructors;
import SCPNHelpers;

modeltype e4sm "strict" uses e4sm("http://de.tu-ilmenau/e4sm/1.0.0");
modeltype core "strict" uses core("http://de.tu-ilmenau/e4sm/core/1.0.0");
modeltype scpn "strict" uses scpn("http://timenet.tu-ilmenau.de/schema/SCPN");

property typesCount : Integer = 0;

mapping core::TypeSpecification::convert() : scpn::RecordTokentype {
	log("\nTransforming type " +  self.name);
	result.id := safeString(self.name) + "_id";
	result.name := safeString(self.name);
	result.type := Type::text;
	result.graphics := object GraphicsType {
		x := (typesCount+1) * 130;
	 	y := 1600
    };
	typesCount := typesCount + 1;
	var superType : TypeSpecification := self.superType;
	result.attribute := self.attributes-> convert();
	while(not superType.oclIsUndefined()) {
		log("\nHas a supertype: " + superType.name);
		result.attribute += superType.attributes-> convert();
		superType := superType.superType;
	}
}

mapping core::AttributeSpecification::convert() : scpn::AttributeType {
	result.dataType := self.toCPPType(); //bool, string, real, DateTime
	result.name := safeString(self.name);
}

property intSize : Integer = 4;
property realSize : Integer = 4;
property stringSize : Integer = 4;
property boolSize : Integer = 4;

helper AttributeSpecification::toCPPType() : String {
	if(self.oclIsTypeOf(IntegerAttribute))	{
		return "int";
	}else if(self.oclIsTypeOf(DoubleAttribute))	{
		return "real";
	}else if(self.oclIsTypeOf(StringAttribute))	{
		return "string";
	}else if(self.oclIsTypeOf(BooleanAttribute))	{
		return "bool";
	}else if(self.oclIsTypeOf(ClassAttribute))	{
		return safeString(self.oclAsType(ClassAttribute).type.name);
	};
	assert warning (false) with log("Unsupported type for " + self.name);
	return "int";
}