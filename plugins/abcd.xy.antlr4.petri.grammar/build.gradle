plugins {
    id 'java'
    id 'antlr'
    id 'eclipse'
}

repositories {
    mavenCentral()
    //jcenter() deprecated
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies{
    antlr "org.antlr:antlr4:4.9.3"
    implementation "org.antlr:antlr4-runtime:4.9.3"
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.2')
    testImplementation fileTree('build/generated-src/antlr/main')
    //implementation files('lib/gpal.jar')
}


task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    include 'antlr4*.jar'
    into "gradle-libs"
}


generateGrammarSource {
    maxHeapSize = "128m"
    arguments += ['-package', 'abcd.xy.antlr4.petri.grammar', /*'-visitor', '-no-listener',*/ '-long-messages']
    outputDirectory = new File(buildDir.toString() + "/gen-src/antlr/main/abcd/de/antlr4/petri/grammar/")
    
    doLast {
        println "Copying generated grammar lexer/parser files to main directory."
        copy {
            from "${buildDir}/gen-src/antlr/main"
            into "src-gen"
        }
    }
    
}

compileJava.dependsOn generateGrammarSource, copyDependencies

sourceSets{
	main{
		java.srcDir 'src/abcd/de/antlr4/petri/model/'
	}
    generated {
        java.srcDir 'src-gen'
    }
    test{
    	java.srcDir 'src/test'
    }
}

compileJava.source sourceSets.generated.java, sourceSets.main.java

clean {
    delete "gen-src"
    delete "src-gen"
    delete fileTree("gradle-libs/").matching {
    	include "*.jar"
    }
    delete fileTree("src/main/antlr").matching {
    	include "*.java", "*.interp", "*.tokens"
    }
}

/*eclipse{
    module{
        sourceDirs += file("generated-src/antlr/main/")
    }
}*/


test {
    //From folder: EDITOR/plugins/abcd.xy.antlr4.petri.grammar/build/classes/java/main  -  run:
    //grun abcd.xy.antlr4.petri.grammar.SCPN expressions -gui ..\..\..\..\examples\input.txt
    useJUnitPlatform()
    //include "abcd.xy.antlr4.petri.tests/*";
    testLogging {
    	// Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
        
        events "passed", "skipped", "failed"
    }
}