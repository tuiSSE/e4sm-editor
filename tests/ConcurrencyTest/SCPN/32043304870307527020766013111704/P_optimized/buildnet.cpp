/***************************************************

   buildnet.cpp - generated by CodeGenerator r$Rev$

****************************************************/

#include "MSVCC.h"
#include "MainClass.h"
#include "ImplementedNetClass.h"
#include "Transition.h"
#include "Token.h"
#include "Place.h"
#include "Transition_S__ready.h"
#include "Transition_P__In__ready.h"
#include "Transition_S1__ready.h"
#include "Transition_S2__ready.h"
#include "Transition_S3__ready.h"
#include "Transition_C1__execution.h"
#include "Transition_A__execution.h"
#include "Transition_P__Out__execution.h"
#include "Transition_P__execution.h"
#include "Transition_Act1__execution.h"
#include "Transition_Act2__execution.h"
#include "Transition_A3__execution.h"
#include "Transition_Binary__execution.h"
#include "Transition_con__sLc2.h"
#include "Transition_con__Vxs5.h"
#include "Transition_con__KSdj.h"
#include "Transition_con__bxwf.h"
#include "Transition_con__Q2pv.h"
#include "Transition_con__0ogb.h"
#include "Transition_con__9K4e.h"
#include "Transition_con__xgVM.h"
#include "Transition_con__WnTU.h"
#include "Transition_con__uOSv.h"
#include "Transition_C1__post__execution.h"
#include "Transition_C1__ready.h"
#include "Transition_S__post__execution.h"
#include "Transition_A__post__execution.h"
#include "Transition_A__in__1__merge.h"
#include "Transition_P__In__post__execution.h"
#include "Transition_P__Out__post__execution.h"
#include "Transition_P__post__execution.h"
#include "Transition_P__ready.h"
#include "Transition_S1__post__execution.h"
#include "Transition_S2__post__execution.h"
#include "Transition_Act1__post__execution.h"
#include "Transition_Act2__post__execution.h"
#include "Transition_S3__post__execution.h"
#include "Transition_A3__post__execution.h"
#include "Transition_Binary__post__execution.h"
#include "Transition_Binary__not__OOD.h"
#include "Transition_Binary__OOD.h"
#include "Transition_Binary__ClassTruth.h"
#include "Transition_Binary__ClassOther.h"
#include "Transition_Binary__ct__tp.h"
#include "Transition_Binary__ct__fn.h"
#include "Transition_Binary____cf__tn.h"
#include "Transition_Binary__cf__fp.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_AReady.h"
#include "MeasureObj_Act1Ready.h"
#include "MeasureObj_Act2Ready.h"
#include "MeasureObj_A3Ready.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"
#include "Token_Data.h"


void ImplementedNetClass::buildNet()
{

	/* Places will be added */
	//
	// ---- Place 'P_thread_pool' ----
	//
	Place *P__thread__pool;
	P__thread__pool = new Place(1, "P_thread_pool", this, false, (unsigned int)(0.0));
	P__thread__pool->setWatch(false);
	addPlace(P__thread__pool);

	//
	// ---- Place 'C1_executed' ----
	//
	Place *C1__executed;
	C1__executed = new Place(2, "C1_executed", this, false, (unsigned int)(0.0));
	C1__executed->setWatch(false);
	addPlace(C1__executed);

	//
	// ---- Place 'C1_main' ----
	//
	Place *C1__main;
	C1__main = new Place(3, "C1_main", this, false, (unsigned int)(0.0));
	C1__main->setWatch(false);
	addPlace(C1__main);

	//
	// ---- Place 'C1_sem' ----
	//
	Place *C1__sem;
	C1__sem = new Place(4, "C1_sem", this, false, (unsigned int)(0.0));
	C1__sem->setWatch(false);
	addPlace(C1__sem);

	//
	// ---- Place 'C1_in_1' ----
	//
	Place *C1__in__1;
	C1__in__1 = new Place(5, "C1_in_1", this, false, (unsigned int)(0.0));
	C1__in__1->setWatch(false);
	addPlace(C1__in__1);

	//
	// ---- Place 'C1_out1' ----
	//
	Place *C1__out1;
	C1__out1 = new Place(6, "C1_out1", this, false, (unsigned int)(0.0));
	C1__out1->setWatch(false);
	addPlace(C1__out1);

	//
	// ---- Place 'C1_out2' ----
	//
	Place *C1__out2;
	C1__out2 = new Place(7, "C1_out2", this, false, (unsigned int)(0.0));
	C1__out2->setWatch(false);
	addPlace(C1__out2);

	//
	// ---- Place 'S_executed' ----
	//
	Place *S__executed;
	S__executed = new Place(8, "S_executed", this, false, (unsigned int)(0.0));
	S__executed->setWatch(false);
	addPlace(S__executed);

	//
	// ---- Place 'S_out1' ----
	//
	Place *S__out1;
	S__out1 = new Place(9, "S_out1", this, false, (unsigned int)(0.0));
	S__out1->setWatch(false);
	addPlace(S__out1);

	//
	// ---- Place 'A_executed' ----
	//
	Place *A__executed;
	A__executed = new Place(10, "A_executed", this, false, (unsigned int)(0.0));
	A__executed->setWatch(false);
	addPlace(A__executed);

	//
	// ---- Place 'A_in_1' ----
	//
	Place *A__in__1;
	A__in__1 = new Place(11, "A_in_1", this, false, (unsigned int)(0.0));
	A__in__1->setWatch(false);
	addPlace(A__in__1);

	//
	// ---- Place 'A_in_1_1' ----
	//
	Place *A__in__1__1;
	A__in__1__1 = new Place(12, "A_in_1_1", this, false, (unsigned int)(0.0));
	A__in__1__1->setWatch(false);
	addPlace(A__in__1__1);

	//
	// ---- Place 'A_in_2_1' ----
	//
	Place *A__in__2__1;
	A__in__2__1 = new Place(13, "A_in_2_1", this, false, (unsigned int)(0.0));
	A__in__2__1->setWatch(false);
	addPlace(A__in__2__1);

	//
	// ---- Place 'P_In_executed' ----
	//
	Place *P__In__executed;
	P__In__executed = new Place(14, "P_In_executed", this, false, (unsigned int)(0.0));
	P__In__executed->setWatch(false);
	addPlace(P__In__executed);

	//
	// ---- Place 'P_In_out1' ----
	//
	Place *P__In__out1;
	P__In__out1 = new Place(15, "P_In_out1", this, false, (unsigned int)(0.0));
	P__In__out1->setWatch(false);
	addPlace(P__In__out1);

	//
	// ---- Place 'P_Out_executed' ----
	//
	Place *P__Out__executed;
	P__Out__executed = new Place(16, "P_Out_executed", this, false, (unsigned int)(0.0));
	P__Out__executed->setWatch(false);
	addPlace(P__Out__executed);

	//
	// ---- Place 'P_Out_in_1' ----
	//
	Place *P__Out__in__1;
	P__Out__in__1 = new Place(17, "P_Out_in_1", this, false, (unsigned int)(0.0));
	P__Out__in__1->setWatch(false);
	addPlace(P__Out__in__1);

	//
	// ---- Place 'P_executed' ----
	//
	Place *P__executed;
	P__executed = new Place(18, "P_executed", this, false, (unsigned int)(0.0));
	P__executed->setWatch(false);
	addPlace(P__executed);

	//
	// ---- Place 'P_main' ----
	//
	Place *P__main;
	P__main = new Place(19, "P_main", this, false, (unsigned int)(0.0));
	P__main->setWatch(false);
	addPlace(P__main);

	//
	// ---- Place 'P_in_1' ----
	//
	Place *P__in__1;
	P__in__1 = new Place(20, "P_in_1", this, false, (unsigned int)(0.0));
	P__in__1->setWatch(false);
	addPlace(P__in__1);

	//
	// ---- Place 'P_in_2' ----
	//
	Place *P__in__2;
	P__in__2 = new Place(21, "P_in_2", this, false, (unsigned int)(0.0));
	P__in__2->setWatch(false);
	addPlace(P__in__2);

	//
	// ---- Place 'P_out1' ----
	//
	Place *P__out1;
	P__out1 = new Place(22, "P_out1", this, false, (unsigned int)(0.0));
	P__out1->setWatch(false);
	addPlace(P__out1);

	//
	// ---- Place 'P_out2' ----
	//
	Place *P__out2;
	P__out2 = new Place(23, "P_out2", this, false, (unsigned int)(0.0));
	P__out2->setWatch(false);
	addPlace(P__out2);

	//
	// ---- Place 'S1_executed' ----
	//
	Place *S1__executed;
	S1__executed = new Place(24, "S1_executed", this, false, (unsigned int)(0.0));
	S1__executed->setWatch(false);
	addPlace(S1__executed);

	//
	// ---- Place 'S1_out1' ----
	//
	Place *S1__out1;
	S1__out1 = new Place(25, "S1_out1", this, false, (unsigned int)(0.0));
	S1__out1->setWatch(false);
	addPlace(S1__out1);

	//
	// ---- Place 'S2_executed' ----
	//
	Place *S2__executed;
	S2__executed = new Place(26, "S2_executed", this, false, (unsigned int)(0.0));
	S2__executed->setWatch(false);
	addPlace(S2__executed);

	//
	// ---- Place 'S2_out1' ----
	//
	Place *S2__out1;
	S2__out1 = new Place(27, "S2_out1", this, false, (unsigned int)(0.0));
	S2__out1->setWatch(false);
	addPlace(S2__out1);

	//
	// ---- Place 'Act1_executed' ----
	//
	Place *Act1__executed;
	Act1__executed = new Place(28, "Act1_executed", this, false, (unsigned int)(0.0));
	Act1__executed->setWatch(false);
	addPlace(Act1__executed);

	//
	// ---- Place 'Act1_in_1' ----
	//
	Place *Act1__in__1;
	Act1__in__1 = new Place(29, "Act1_in_1", this, false, (unsigned int)(0.0));
	Act1__in__1->setWatch(false);
	addPlace(Act1__in__1);

	//
	// ---- Place 'Act2_executed' ----
	//
	Place *Act2__executed;
	Act2__executed = new Place(30, "Act2_executed", this, false, (unsigned int)(0.0));
	Act2__executed->setWatch(false);
	addPlace(Act2__executed);

	//
	// ---- Place 'Act2_in_1' ----
	//
	Place *Act2__in__1;
	Act2__in__1 = new Place(31, "Act2_in_1", this, false, (unsigned int)(0.0));
	Act2__in__1->setWatch(false);
	addPlace(Act2__in__1);

	//
	// ---- Place 'S3_executed' ----
	//
	Place *S3__executed;
	S3__executed = new Place(32, "S3_executed", this, false, (unsigned int)(0.0));
	S3__executed->setWatch(false);
	addPlace(S3__executed);

	//
	// ---- Place 'S3_out1' ----
	//
	Place *S3__out1;
	S3__out1 = new Place(33, "S3_out1", this, false, (unsigned int)(0.0));
	S3__out1->setWatch(false);
	addPlace(S3__out1);

	//
	// ---- Place 'A3_executed' ----
	//
	Place *A3__executed;
	A3__executed = new Place(34, "A3_executed", this, false, (unsigned int)(0.0));
	A3__executed->setWatch(false);
	addPlace(A3__executed);

	//
	// ---- Place 'A3_in_1' ----
	//
	Place *A3__in__1;
	A3__in__1 = new Place(35, "A3_in_1", this, false, (unsigned int)(0.0));
	A3__in__1->setWatch(false);
	addPlace(A3__in__1);

	//
	// ---- Place 'Binary_executed' ----
	//
	Place *Binary__executed;
	Binary__executed = new Place(36, "Binary_executed", this, false, (unsigned int)(0.0));
	Binary__executed->setWatch(false);
	addPlace(Binary__executed);

	//
	// ---- Place 'Binary_in_1' ----
	//
	Place *Binary__in__1;
	Binary__in__1 = new Place(37, "Binary_in_1", this, false, (unsigned int)(0.0));
	Binary__in__1->setWatch(false);
	addPlace(Binary__in__1);

	//
	// ---- Place 'Binary_out1' ----
	//
	Place *Binary__out1;
	Binary__out1 = new Place(38, "Binary_out1", this, false, (unsigned int)(0.0));
	Binary__out1->setWatch(false);
	addPlace(Binary__out1);

	//
	// ---- Place 'Binary_in_data' ----
	//
	Place *Binary__in__data;
	Binary__in__data = new Place(39, "Binary_in_data", this, false, (unsigned int)(0.0));
	Binary__in__data->setWatch(false);
	addPlace(Binary__in__data);

	//
	// ---- Place 'Binary_data_gen' ----
	//
	Place *Binary__data__gen;
	Binary__data__gen = new Place(40, "Binary_data_gen", this, false, (unsigned int)(0.0));
	Binary__data__gen->setWatch(false);
	addPlace(Binary__data__gen);

	//
	// ---- Place 'Binary_ct' ----
	//
	Place *Binary__ct;
	Binary__ct = new Place(41, "Binary_ct", this, false, (unsigned int)(0.0));
	Binary__ct->setWatch(false);
	addPlace(Binary__ct);

	//
	// ---- Place 'Binary_cf' ----
	//
	Place *Binary__cf;
	Binary__cf = new Place(42, "Binary_cf", this, false, (unsigned int)(0.0));
	Binary__cf->setWatch(false);
	addPlace(Binary__cf);

	//
	// ---- Place 'Binary_tp' ----
	//
	Place *Binary__tp;
	Binary__tp = new Place(43, "Binary_tp", this, false, (unsigned int)(0.0));
	Binary__tp->setWatch(false);
	addPlace(Binary__tp);

	//
	// ---- Place 'Binary_fn' ----
	//
	Place *Binary__fn;
	Binary__fn = new Place(44, "Binary_fn", this, false, (unsigned int)(0.0));
	Binary__fn->setWatch(false);
	addPlace(Binary__fn);

	//
	// ---- Place 'Binary_tn' ----
	//
	Place *Binary__tn;
	Binary__tn = new Place(45, "Binary_tn", this, false, (unsigned int)(0.0));
	Binary__tn->setWatch(false);
	addPlace(Binary__tn);

	//
	// ---- Place 'Binary_fp' ----
	//
	Place *Binary__fp;
	Binary__fp = new Place(46, "Binary_fp", this, false, (unsigned int)(0.0));
	Binary__fp->setWatch(false);
	addPlace(Binary__fp);


	/* Transitions will be added*/
	//
	// ---- Transition 'S_ready' ----
	//
	PlaceIdentMap places_S__ready;
	places_S__ready.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S__ready.insert(make_pair(string("S_executed"),string("S_executed")));

	Transition *S__ready;
	S__ready = new Transition_S__ready(1, "S_ready", this, places_S__ready, "", 0, 0, true, false, false, false);

	S__ready->setDisplaying(false);
	S__ready->setWatch(true);
	S__ready->setImmediate(false);
	S__ready->setLogfile("", "");
	addTransition(S__ready);

	//
	// ---- Transition 'P_In_ready' ----
	//
	PlaceIdentMap places_P__In__ready;
	places_P__In__ready.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_P__In__ready.insert(make_pair(string("P_In_executed"),string("P_In_executed")));

	Transition *P__In__ready;
	P__In__ready = new Transition_P__In__ready(2, "P_In_ready", this, places_P__In__ready, "", 0, 0, true, false, false, false);

	P__In__ready->setDisplaying(false);
	P__In__ready->setWatch(true);
	P__In__ready->setImmediate(false);
	P__In__ready->setLogfile("", "");
	addTransition(P__In__ready);

	//
	// ---- Transition 'S1_ready' ----
	//
	PlaceIdentMap places_S1__ready;
	places_S1__ready.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S1__ready.insert(make_pair(string("S1_executed"),string("S1_executed")));

	Transition *S1__ready;
	S1__ready = new Transition_S1__ready(3, "S1_ready", this, places_S1__ready, "", 0, 0, true, false, false, false);

	S1__ready->setDisplaying(false);
	S1__ready->setWatch(true);
	S1__ready->setImmediate(false);
	S1__ready->setLogfile("", "");
	addTransition(S1__ready);

	//
	// ---- Transition 'S2_ready' ----
	//
	PlaceIdentMap places_S2__ready;
	places_S2__ready.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S2__ready.insert(make_pair(string("S2_executed"),string("S2_executed")));

	Transition *S2__ready;
	S2__ready = new Transition_S2__ready(4, "S2_ready", this, places_S2__ready, "", 0, 0, true, false, false, false);

	S2__ready->setDisplaying(false);
	S2__ready->setWatch(true);
	S2__ready->setImmediate(false);
	S2__ready->setLogfile("", "");
	addTransition(S2__ready);

	//
	// ---- Transition 'S3_ready' ----
	//
	PlaceIdentMap places_S3__ready;
	places_S3__ready.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S3__ready.insert(make_pair(string("S3_executed"),string("S3_executed")));

	Transition *S3__ready;
	S3__ready = new Transition_S3__ready(5, "S3_ready", this, places_S3__ready, "", 0, 0, true, false, false, false);

	S3__ready->setDisplaying(false);
	S3__ready->setWatch(true);
	S3__ready->setImmediate(false);
	S3__ready->setLogfile("", "");
	addTransition(S3__ready);

	//
	// ---- Transition 'C1_execution' ----
	//
	PlaceIdentMap places_C1__execution;
	places_C1__execution.insert(make_pair(string("C1_main"),string("C1_main")));
	places_C1__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_C1__execution.insert(make_pair(string("C1_executed"),string("C1_executed")));
	places_C1__execution.insert(make_pair(string("C1_sem"),string("C1_sem")));

	Transition *C1__execution;
	C1__execution = new Transition_C1__execution(6, "C1_execution", this, places_C1__execution, "", 0, 0, true, false, false, false);

	C1__execution->setDisplaying(false);
	C1__execution->setWatch(false);
	C1__execution->setImmediate(false);
	C1__execution->setLogfile("", "");
	addTransition(C1__execution);

	//
	// ---- Transition 'A_execution' ----
	//
	PlaceIdentMap places_A__execution;
	places_A__execution.insert(make_pair(string("A_in_1"),string("A_in_1")));
	places_A__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_A__execution.insert(make_pair(string("A_executed"),string("A_executed")));

	Transition *A__execution;
	A__execution = new Transition_A__execution(7, "A_execution", this, places_A__execution, "", 0, 0, true, false, false, false);

	A__execution->setDisplaying(false);
	A__execution->setWatch(false);
	A__execution->setImmediate(false);
	A__execution->setLogfile("", "");
	addTransition(A__execution);

	//
	// ---- Transition 'P_Out_execution' ----
	//
	PlaceIdentMap places_P__Out__execution;
	places_P__Out__execution.insert(make_pair(string("P_Out_in_1"),string("P_Out_in_1")));
	places_P__Out__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_P__Out__execution.insert(make_pair(string("P_Out_executed"),string("P_Out_executed")));

	Transition *P__Out__execution;
	P__Out__execution = new Transition_P__Out__execution(8, "P_Out_execution", this, places_P__Out__execution, "", 0, 0, true, false, false, false);

	P__Out__execution->setDisplaying(false);
	P__Out__execution->setWatch(false);
	P__Out__execution->setImmediate(false);
	P__Out__execution->setLogfile("", "");
	addTransition(P__Out__execution);

	//
	// ---- Transition 'P_execution' ----
	//
	PlaceIdentMap places_P__execution;
	places_P__execution.insert(make_pair(string("P_main"),string("P_main")));
	places_P__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_P__execution.insert(make_pair(string("P_executed"),string("P_executed")));

	Transition *P__execution;
	P__execution = new Transition_P__execution(9, "P_execution", this, places_P__execution, "", 0, 0, true, false, false, false);

	P__execution->setDisplaying(false);
	P__execution->setWatch(false);
	P__execution->setImmediate(false);
	P__execution->setLogfile("", "");
	addTransition(P__execution);

	//
	// ---- Transition 'Act1_execution' ----
	//
	PlaceIdentMap places_Act1__execution;
	places_Act1__execution.insert(make_pair(string("Act1_in_1"),string("Act1_in_1")));
	places_Act1__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_Act1__execution.insert(make_pair(string("Act1_executed"),string("Act1_executed")));

	Transition *Act1__execution;
	Act1__execution = new Transition_Act1__execution(10, "Act1_execution", this, places_Act1__execution, "", 0, 0, true, false, false, false);

	Act1__execution->setDisplaying(false);
	Act1__execution->setWatch(false);
	Act1__execution->setImmediate(false);
	Act1__execution->setLogfile("", "");
	addTransition(Act1__execution);

	//
	// ---- Transition 'Act2_execution' ----
	//
	PlaceIdentMap places_Act2__execution;
	places_Act2__execution.insert(make_pair(string("Act2_in_1"),string("Act2_in_1")));
	places_Act2__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_Act2__execution.insert(make_pair(string("Act2_executed"),string("Act2_executed")));

	Transition *Act2__execution;
	Act2__execution = new Transition_Act2__execution(11, "Act2_execution", this, places_Act2__execution, "", 0, 0, true, false, false, false);

	Act2__execution->setDisplaying(false);
	Act2__execution->setWatch(false);
	Act2__execution->setImmediate(false);
	Act2__execution->setLogfile("", "");
	addTransition(Act2__execution);

	//
	// ---- Transition 'A3_execution' ----
	//
	PlaceIdentMap places_A3__execution;
	places_A3__execution.insert(make_pair(string("A3_in_1"),string("A3_in_1")));
	places_A3__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_A3__execution.insert(make_pair(string("A3_executed"),string("A3_executed")));

	Transition *A3__execution;
	A3__execution = new Transition_A3__execution(12, "A3_execution", this, places_A3__execution, "", 0, 0, true, false, false, false);

	A3__execution->setDisplaying(false);
	A3__execution->setWatch(false);
	A3__execution->setImmediate(false);
	A3__execution->setLogfile("", "");
	addTransition(A3__execution);

	//
	// ---- Transition 'Binary_execution' ----
	//
	PlaceIdentMap places_Binary__execution;
	places_Binary__execution.insert(make_pair(string("Binary_in_1"),string("Binary_in_1")));
	places_Binary__execution.insert(make_pair(string("Binary_executed"),string("Binary_executed")));
	places_Binary__execution.insert(make_pair(string("Binary_in_data"),string("Binary_in_data")));

	Transition *Binary__execution;
	Binary__execution = new Transition_Binary__execution(13, "Binary_execution", this, places_Binary__execution, "", 0, 0, true, false, false, false);

	Binary__execution->setDisplaying(false);
	Binary__execution->setWatch(false);
	Binary__execution->setImmediate(false);
	Binary__execution->setLogfile("", "");
	addTransition(Binary__execution);

	//
	// ---- Transition 'con_sLc2' ----
	//
	PlaceIdentMap places_con__sLc2;
	places_con__sLc2.insert(make_pair(string("S_out1"),string("S_out1")));
	places_con__sLc2.insert(make_pair(string("C1_in_1"),string("C1_in_1")));

	Transition *con__sLc2;
	con__sLc2 = new Transition_con__sLc2(14, "con_sLc2", this, places_con__sLc2, "", 0, 0, true, false, false, false);

	con__sLc2->setDisplaying(false);
	con__sLc2->setWatch(false);
	con__sLc2->setImmediate(false);
	con__sLc2->setLogfile("", "");
	addTransition(con__sLc2);

	//
	// ---- Transition 'con_Vxs5' ----
	//
	PlaceIdentMap places_con__Vxs5;
	places_con__Vxs5.insert(make_pair(string("C1_out1"),string("C1_out1")));
	places_con__Vxs5.insert(make_pair(string("A_in_1_1"),string("A_in_1_1")));

	Transition *con__Vxs5;
	con__Vxs5 = new Transition_con__Vxs5(15, "con_Vxs5", this, places_con__Vxs5, "", 0, 0, true, false, false, false);

	con__Vxs5->setDisplaying(false);
	con__Vxs5->setWatch(false);
	con__Vxs5->setImmediate(false);
	con__Vxs5->setLogfile("", "");
	addTransition(con__Vxs5);

	//
	// ---- Transition 'con_KSdj' ----
	//
	PlaceIdentMap places_con__KSdj;
	places_con__KSdj.insert(make_pair(string("C1_out2"),string("C1_out2")));
	places_con__KSdj.insert(make_pair(string("A_in_2_1"),string("A_in_2_1")));

	Transition *con__KSdj;
	con__KSdj = new Transition_con__KSdj(16, "con_KSdj", this, places_con__KSdj, "", 0, 0, true, false, false, false);

	con__KSdj->setDisplaying(false);
	con__KSdj->setWatch(false);
	con__KSdj->setImmediate(false);
	con__KSdj->setLogfile("", "");
	addTransition(con__KSdj);

	//
	// ---- Transition 'con_bxwf' ----
	//
	PlaceIdentMap places_con__bxwf;
	places_con__bxwf.insert(make_pair(string("P_In_out1"),string("P_In_out1")));
	places_con__bxwf.insert(make_pair(string("P_Out_in_1"),string("P_Out_in_1")));

	Transition *con__bxwf;
	con__bxwf = new Transition_con__bxwf(17, "con_bxwf", this, places_con__bxwf, "", 0, 0, true, false, false, false);

	con__bxwf->setDisplaying(false);
	con__bxwf->setWatch(false);
	con__bxwf->setImmediate(false);
	con__bxwf->setLogfile("", "");
	addTransition(con__bxwf);

	//
	// ---- Transition 'con_Q2pv' ----
	//
	PlaceIdentMap places_con__Q2pv;
	places_con__Q2pv.insert(make_pair(string("S2_out1"),string("S2_out1")));
	places_con__Q2pv.insert(make_pair(string("P_in_2"),string("P_in_2")));

	Transition *con__Q2pv;
	con__Q2pv = new Transition_con__Q2pv(18, "con_Q2pv", this, places_con__Q2pv, "", 0, 0, true, false, false, false);

	con__Q2pv->setDisplaying(false);
	con__Q2pv->setWatch(false);
	con__Q2pv->setImmediate(false);
	con__Q2pv->setLogfile("", "");
	addTransition(con__Q2pv);

	//
	// ---- Transition 'con_0ogb' ----
	//
	PlaceIdentMap places_con__0ogb;
	places_con__0ogb.insert(make_pair(string("S1_out1"),string("S1_out1")));
	places_con__0ogb.insert(make_pair(string("P_in_1"),string("P_in_1")));

	Transition *con__0ogb;
	con__0ogb = new Transition_con__0ogb(19, "con_0ogb", this, places_con__0ogb, "", 0, 0, true, false, false, false);

	con__0ogb->setDisplaying(false);
	con__0ogb->setWatch(false);
	con__0ogb->setImmediate(false);
	con__0ogb->setLogfile("", "");
	addTransition(con__0ogb);

	//
	// ---- Transition 'con_9K4e' ----
	//
	PlaceIdentMap places_con__9K4e;
	places_con__9K4e.insert(make_pair(string("P_out1"),string("P_out1")));
	places_con__9K4e.insert(make_pair(string("Act1_in_1"),string("Act1_in_1")));

	Transition *con__9K4e;
	con__9K4e = new Transition_con__9K4e(20, "con_9K4e", this, places_con__9K4e, "", 0, 0, true, false, false, false);

	con__9K4e->setDisplaying(false);
	con__9K4e->setWatch(false);
	con__9K4e->setImmediate(false);
	con__9K4e->setLogfile("", "");
	addTransition(con__9K4e);

	//
	// ---- Transition 'con_xgVM' ----
	//
	PlaceIdentMap places_con__xgVM;
	places_con__xgVM.insert(make_pair(string("P_out2"),string("P_out2")));
	places_con__xgVM.insert(make_pair(string("Act2_in_1"),string("Act2_in_1")));

	Transition *con__xgVM;
	con__xgVM = new Transition_con__xgVM(21, "con_xgVM", this, places_con__xgVM, "", 0, 0, true, false, false, false);

	con__xgVM->setDisplaying(false);
	con__xgVM->setWatch(false);
	con__xgVM->setImmediate(false);
	con__xgVM->setLogfile("", "");
	addTransition(con__xgVM);

	//
	// ---- Transition 'con_WnTU' ----
	//
	PlaceIdentMap places_con__WnTU;
	places_con__WnTU.insert(make_pair(string("S3_out1"),string("S3_out1")));
	places_con__WnTU.insert(make_pair(string("Binary_in_1"),string("Binary_in_1")));

	Transition *con__WnTU;
	con__WnTU = new Transition_con__WnTU(22, "con_WnTU", this, places_con__WnTU, "", 0, 0, true, false, false, false);

	con__WnTU->setDisplaying(false);
	con__WnTU->setWatch(false);
	con__WnTU->setImmediate(false);
	con__WnTU->setLogfile("", "");
	addTransition(con__WnTU);

	//
	// ---- Transition 'con_uOSv' ----
	//
	PlaceIdentMap places_con__uOSv;
	places_con__uOSv.insert(make_pair(string("Binary_out1"),string("Binary_out1")));
	places_con__uOSv.insert(make_pair(string("A3_in_1"),string("A3_in_1")));

	Transition *con__uOSv;
	con__uOSv = new Transition_con__uOSv(23, "con_uOSv", this, places_con__uOSv, "", 0, 0, true, false, false, false);

	con__uOSv->setDisplaying(false);
	con__uOSv->setWatch(false);
	con__uOSv->setImmediate(false);
	con__uOSv->setLogfile("", "");
	addTransition(con__uOSv);

	//
	// ---- Transition 'C1_post_execution' ----
	//
	PlaceIdentMap places_C1__post__execution;
	places_C1__post__execution.insert(make_pair(string("C1_executed"),string("C1_executed")));
	places_C1__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_C1__post__execution.insert(make_pair(string("C1_out1"),string("C1_out1")));
	places_C1__post__execution.insert(make_pair(string("C1_out2"),string("C1_out2")));

	Transition *C1__post__execution;
	C1__post__execution = new Transition_C1__post__execution(24, "C1_post_execution", this, places_C1__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	C1__post__execution->setDisplaying(false);
	C1__post__execution->setWatch(false);
	C1__post__execution->setImmediate(true);
	C1__post__execution->setLogfile("", "");
	addTransition(C1__post__execution);

	//
	// ---- Transition 'C1_ready' ----
	//
	PlaceIdentMap places_C1__ready;
	places_C1__ready.insert(make_pair(string("C1_sem"),string("C1_sem")));
	places_C1__ready.insert(make_pair(string("C1_in_1"),string("C1_in_1")));
	places_C1__ready.insert(make_pair(string("C1_main"),string("C1_main")));

	Transition *C1__ready;
	C1__ready = new Transition_C1__ready(25, "C1_ready", this, places_C1__ready, "", 1.0, (int)1.0, false, false, false, false);

	C1__ready->setDisplaying(false);
	C1__ready->setWatch(false);
	C1__ready->setImmediate(true);
	C1__ready->setLogfile("", "");
	addTransition(C1__ready);

	//
	// ---- Transition 'S_post_execution' ----
	//
	PlaceIdentMap places_S__post__execution;
	places_S__post__execution.insert(make_pair(string("S_executed"),string("S_executed")));
	places_S__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S__post__execution.insert(make_pair(string("S_out1"),string("S_out1")));

	Transition *S__post__execution;
	S__post__execution = new Transition_S__post__execution(26, "S_post_execution", this, places_S__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	S__post__execution->setDisplaying(false);
	S__post__execution->setWatch(false);
	S__post__execution->setImmediate(true);
	S__post__execution->setLogfile("", "");
	addTransition(S__post__execution);

	//
	// ---- Transition 'A_post_execution' ----
	//
	PlaceIdentMap places_A__post__execution;
	places_A__post__execution.insert(make_pair(string("A_executed"),string("A_executed")));
	places_A__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));

	Transition *A__post__execution;
	A__post__execution = new Transition_A__post__execution(27, "A_post_execution", this, places_A__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	A__post__execution->setDisplaying(false);
	A__post__execution->setWatch(false);
	A__post__execution->setImmediate(true);
	A__post__execution->setLogfile("", "");
	addTransition(A__post__execution);

	//
	// ---- Transition 'A_in_1_merge' ----
	//
	PlaceIdentMap places_A__in__1__merge;
	places_A__in__1__merge.insert(make_pair(string("A_in_1_1"),string("A_in_1_1")));
	places_A__in__1__merge.insert(make_pair(string("A_in_2_1"),string("A_in_2_1")));
	places_A__in__1__merge.insert(make_pair(string("A_in_1"),string("A_in_1")));

	Transition *A__in__1__merge;
	A__in__1__merge = new Transition_A__in__1__merge(28, "A_in_1_merge", this, places_A__in__1__merge, "", 1.0, (int)1.0, false, false, false, false);

	A__in__1__merge->setDisplaying(false);
	A__in__1__merge->setWatch(false);
	A__in__1__merge->setImmediate(true);
	A__in__1__merge->setLogfile("", "");
	addTransition(A__in__1__merge);

	//
	// ---- Transition 'P_In_post_execution' ----
	//
	PlaceIdentMap places_P__In__post__execution;
	places_P__In__post__execution.insert(make_pair(string("P_In_executed"),string("P_In_executed")));
	places_P__In__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_P__In__post__execution.insert(make_pair(string("P_In_out1"),string("P_In_out1")));

	Transition *P__In__post__execution;
	P__In__post__execution = new Transition_P__In__post__execution(29, "P_In_post_execution", this, places_P__In__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	P__In__post__execution->setDisplaying(false);
	P__In__post__execution->setWatch(false);
	P__In__post__execution->setImmediate(true);
	P__In__post__execution->setLogfile("", "");
	addTransition(P__In__post__execution);

	//
	// ---- Transition 'P_Out_post_execution' ----
	//
	PlaceIdentMap places_P__Out__post__execution;
	places_P__Out__post__execution.insert(make_pair(string("P_Out_executed"),string("P_Out_executed")));
	places_P__Out__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));

	Transition *P__Out__post__execution;
	P__Out__post__execution = new Transition_P__Out__post__execution(30, "P_Out_post_execution", this, places_P__Out__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	P__Out__post__execution->setDisplaying(false);
	P__Out__post__execution->setWatch(false);
	P__Out__post__execution->setImmediate(true);
	P__Out__post__execution->setLogfile("", "");
	addTransition(P__Out__post__execution);

	//
	// ---- Transition 'P_post_execution' ----
	//
	PlaceIdentMap places_P__post__execution;
	places_P__post__execution.insert(make_pair(string("P_executed"),string("P_executed")));
	places_P__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_P__post__execution.insert(make_pair(string("P_out1"),string("P_out1")));
	places_P__post__execution.insert(make_pair(string("P_out2"),string("P_out2")));

	Transition *P__post__execution;
	P__post__execution = new Transition_P__post__execution(31, "P_post_execution", this, places_P__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	P__post__execution->setDisplaying(false);
	P__post__execution->setWatch(false);
	P__post__execution->setImmediate(true);
	P__post__execution->setLogfile("", "");
	addTransition(P__post__execution);

	//
	// ---- Transition 'P_ready' ----
	//
	PlaceIdentMap places_P__ready;
	places_P__ready.insert(make_pair(string("P_in_1"),string("P_in_1")));
	places_P__ready.insert(make_pair(string("P_in_2"),string("P_in_2")));
	places_P__ready.insert(make_pair(string("P_main"),string("P_main")));

	Transition *P__ready;
	P__ready = new Transition_P__ready(32, "P_ready", this, places_P__ready, "", 1.0, (int)1.0, false, false, false, false);

	P__ready->setDisplaying(false);
	P__ready->setWatch(false);
	P__ready->setImmediate(true);
	P__ready->setLogfile("", "");
	addTransition(P__ready);

	//
	// ---- Transition 'S1_post_execution' ----
	//
	PlaceIdentMap places_S1__post__execution;
	places_S1__post__execution.insert(make_pair(string("S1_executed"),string("S1_executed")));
	places_S1__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S1__post__execution.insert(make_pair(string("S1_out1"),string("S1_out1")));

	Transition *S1__post__execution;
	S1__post__execution = new Transition_S1__post__execution(33, "S1_post_execution", this, places_S1__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	S1__post__execution->setDisplaying(false);
	S1__post__execution->setWatch(false);
	S1__post__execution->setImmediate(true);
	S1__post__execution->setLogfile("", "");
	addTransition(S1__post__execution);

	//
	// ---- Transition 'S2_post_execution' ----
	//
	PlaceIdentMap places_S2__post__execution;
	places_S2__post__execution.insert(make_pair(string("S2_executed"),string("S2_executed")));
	places_S2__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S2__post__execution.insert(make_pair(string("S2_out1"),string("S2_out1")));

	Transition *S2__post__execution;
	S2__post__execution = new Transition_S2__post__execution(34, "S2_post_execution", this, places_S2__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	S2__post__execution->setDisplaying(false);
	S2__post__execution->setWatch(false);
	S2__post__execution->setImmediate(true);
	S2__post__execution->setLogfile("", "");
	addTransition(S2__post__execution);

	//
	// ---- Transition 'Act1_post_execution' ----
	//
	PlaceIdentMap places_Act1__post__execution;
	places_Act1__post__execution.insert(make_pair(string("Act1_executed"),string("Act1_executed")));
	places_Act1__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));

	Transition *Act1__post__execution;
	Act1__post__execution = new Transition_Act1__post__execution(35, "Act1_post_execution", this, places_Act1__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	Act1__post__execution->setDisplaying(false);
	Act1__post__execution->setWatch(false);
	Act1__post__execution->setImmediate(true);
	Act1__post__execution->setLogfile("", "");
	addTransition(Act1__post__execution);

	//
	// ---- Transition 'Act2_post_execution' ----
	//
	PlaceIdentMap places_Act2__post__execution;
	places_Act2__post__execution.insert(make_pair(string("Act2_executed"),string("Act2_executed")));
	places_Act2__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));

	Transition *Act2__post__execution;
	Act2__post__execution = new Transition_Act2__post__execution(36, "Act2_post_execution", this, places_Act2__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	Act2__post__execution->setDisplaying(false);
	Act2__post__execution->setWatch(false);
	Act2__post__execution->setImmediate(true);
	Act2__post__execution->setLogfile("", "");
	addTransition(Act2__post__execution);

	//
	// ---- Transition 'S3_post_execution' ----
	//
	PlaceIdentMap places_S3__post__execution;
	places_S3__post__execution.insert(make_pair(string("S3_executed"),string("S3_executed")));
	places_S3__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));
	places_S3__post__execution.insert(make_pair(string("S3_out1"),string("S3_out1")));

	Transition *S3__post__execution;
	S3__post__execution = new Transition_S3__post__execution(37, "S3_post_execution", this, places_S3__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	S3__post__execution->setDisplaying(false);
	S3__post__execution->setWatch(false);
	S3__post__execution->setImmediate(true);
	S3__post__execution->setLogfile("", "");
	addTransition(S3__post__execution);

	//
	// ---- Transition 'A3_post_execution' ----
	//
	PlaceIdentMap places_A3__post__execution;
	places_A3__post__execution.insert(make_pair(string("A3_executed"),string("A3_executed")));
	places_A3__post__execution.insert(make_pair(string("P_thread_pool"),string("P_thread_pool")));

	Transition *A3__post__execution;
	A3__post__execution = new Transition_A3__post__execution(38, "A3_post_execution", this, places_A3__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	A3__post__execution->setDisplaying(false);
	A3__post__execution->setWatch(false);
	A3__post__execution->setImmediate(true);
	A3__post__execution->setLogfile("", "");
	addTransition(A3__post__execution);

	//
	// ---- Transition 'Binary_post_execution' ----
	//
	PlaceIdentMap places_Binary__post__execution;
	places_Binary__post__execution.insert(make_pair(string("Binary_executed"),string("Binary_executed")));
	places_Binary__post__execution.insert(make_pair(string("Binary_out1"),string("Binary_out1")));

	Transition *Binary__post__execution;
	Binary__post__execution = new Transition_Binary__post__execution(39, "Binary_post_execution", this, places_Binary__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	Binary__post__execution->setDisplaying(false);
	Binary__post__execution->setWatch(false);
	Binary__post__execution->setImmediate(true);
	Binary__post__execution->setLogfile("", "");
	addTransition(Binary__post__execution);

	//
	// ---- Transition 'Binary_not_OOD' ----
	//
	PlaceIdentMap places_Binary__not__OOD;
	places_Binary__not__OOD.insert(make_pair(string("Binary_in_data"),string("Binary_in_data")));
	places_Binary__not__OOD.insert(make_pair(string("Binary_data_gen"),string("Binary_data_gen")));

	Transition *Binary__not__OOD;
	Binary__not__OOD = new Transition_Binary__not__OOD(40, "Binary_not_OOD", this, places_Binary__not__OOD, "", 1.0, (int)1.0, false, false, false, false);

	Binary__not__OOD->setDisplaying(false);
	Binary__not__OOD->setWatch(false);
	Binary__not__OOD->setImmediate(true);
	Binary__not__OOD->setLogfile("", "");
	addTransition(Binary__not__OOD);

	//
	// ---- Transition 'Binary_OOD' ----
	//
	PlaceIdentMap places_Binary__OOD;
	places_Binary__OOD.insert(make_pair(string("Binary_in_data"),string("Binary_in_data")));
	places_Binary__OOD.insert(make_pair(string("Binary_cf"),string("Binary_cf")));

	Transition *Binary__OOD;
	Binary__OOD = new Transition_Binary__OOD(41, "Binary_OOD", this, places_Binary__OOD, "", 0.0, (int)1.0, false, false, false, false);

	Binary__OOD->setDisplaying(false);
	Binary__OOD->setWatch(false);
	Binary__OOD->setImmediate(true);
	Binary__OOD->setLogfile("", "");
	addTransition(Binary__OOD);

	//
	// ---- Transition 'Binary_ClassTruth' ----
	//
	PlaceIdentMap places_Binary__ClassTruth;
	places_Binary__ClassTruth.insert(make_pair(string("Binary_data_gen"),string("Binary_data_gen")));
	places_Binary__ClassTruth.insert(make_pair(string("Binary_ct"),string("Binary_ct")));

	Transition *Binary__ClassTruth;
	Binary__ClassTruth = new Transition_Binary__ClassTruth(42, "Binary_ClassTruth", this, places_Binary__ClassTruth, "", 0.9688249400479616, (int)1.0, false, false, false, false);

	Binary__ClassTruth->setDisplaying(false);
	Binary__ClassTruth->setWatch(false);
	Binary__ClassTruth->setImmediate(true);
	Binary__ClassTruth->setLogfile("", "");
	addTransition(Binary__ClassTruth);

	//
	// ---- Transition 'Binary_ClassOther' ----
	//
	PlaceIdentMap places_Binary__ClassOther;
	places_Binary__ClassOther.insert(make_pair(string("Binary_data_gen"),string("Binary_data_gen")));
	places_Binary__ClassOther.insert(make_pair(string("Binary_cf"),string("Binary_cf")));

	Transition *Binary__ClassOther;
	Binary__ClassOther = new Transition_Binary__ClassOther(43, "Binary_ClassOther", this, places_Binary__ClassOther, "", 0.031175059952038398, (int)1.0, false, false, false, false);

	Binary__ClassOther->setDisplaying(false);
	Binary__ClassOther->setWatch(false);
	Binary__ClassOther->setImmediate(true);
	Binary__ClassOther->setLogfile("", "");
	addTransition(Binary__ClassOther);

	//
	// ---- Transition 'Binary_ct_tp' ----
	//
	PlaceIdentMap places_Binary__ct__tp;
	places_Binary__ct__tp.insert(make_pair(string("Binary_ct"),string("Binary_ct")));
	places_Binary__ct__tp.insert(make_pair(string("Binary_tp"),string("Binary_tp")));

	Transition *Binary__ct__tp;
	Binary__ct__tp = new Transition_Binary__ct__tp(44, "Binary_ct_tp", this, places_Binary__ct__tp, "", 0.9900990099009901, (int)1.0, false, false, false, false);

	Binary__ct__tp->setDisplaying(false);
	Binary__ct__tp->setWatch(false);
	Binary__ct__tp->setImmediate(true);
	Binary__ct__tp->setLogfile("", "");
	addTransition(Binary__ct__tp);

	//
	// ---- Transition 'Binary_ct_fn' ----
	//
	PlaceIdentMap places_Binary__ct__fn;
	places_Binary__ct__fn.insert(make_pair(string("Binary_ct"),string("Binary_ct")));
	places_Binary__ct__fn.insert(make_pair(string("Binary_fn"),string("Binary_fn")));

	Transition *Binary__ct__fn;
	Binary__ct__fn = new Transition_Binary__ct__fn(45, "Binary_ct_fn", this, places_Binary__ct__fn, "", 0.00990099009900991, (int)1.0, false, false, false, false);

	Binary__ct__fn->setDisplaying(false);
	Binary__ct__fn->setWatch(false);
	Binary__ct__fn->setImmediate(true);
	Binary__ct__fn->setLogfile("", "");
	addTransition(Binary__ct__fn);

	//
	// ---- Transition 'Binary__cf_tn' ----
	//
	PlaceIdentMap places_Binary____cf__tn;
	places_Binary____cf__tn.insert(make_pair(string("Binary_cf"),string("Binary_cf")));
	places_Binary____cf__tn.insert(make_pair(string("Binary_tn"),string("Binary_tn")));

	Transition *Binary____cf__tn;
	Binary____cf__tn = new Transition_Binary____cf__tn(46, "Binary__cf_tn", this, places_Binary____cf__tn, "", 0.6153846153846154, (int)1.0, false, false, false, false);

	Binary____cf__tn->setDisplaying(false);
	Binary____cf__tn->setWatch(false);
	Binary____cf__tn->setImmediate(true);
	Binary____cf__tn->setLogfile("", "");
	addTransition(Binary____cf__tn);

	//
	// ---- Transition 'Binary_cf_fp' ----
	//
	PlaceIdentMap places_Binary__cf__fp;
	places_Binary__cf__fp.insert(make_pair(string("Binary_cf"),string("Binary_cf")));
	places_Binary__cf__fp.insert(make_pair(string("Binary_fp"),string("Binary_fp")));

	Transition *Binary__cf__fp;
	Binary__cf__fp = new Transition_Binary__cf__fp(47, "Binary_cf_fp", this, places_Binary__cf__fp, "", 0.3846153846153846, (int)1.0, false, false, false, false);

	Binary__cf__fp->setDisplaying(false);
	Binary__cf__fp->setWatch(false);
	Binary__cf__fp->setImmediate(true);
	Binary__cf__fp->setLogfile("", "");
	addTransition(Binary__cf__fp);


	/* Transitionen will be linked*/
	linkPlaceToTransition("P_thread_pool", "S_ready", 1);
	linkTransitionToPlace("S_ready", "S_executed", 1);
	linkPlaceToTransition("P_thread_pool", "P_In_ready", 1);
	linkTransitionToPlace("P_In_ready", "P_In_executed", 1);
	linkPlaceToTransition("P_thread_pool", "S1_ready", 1);
	linkTransitionToPlace("S1_ready", "S1_executed", 1);
	linkPlaceToTransition("P_thread_pool", "S2_ready", 1);
	linkTransitionToPlace("S2_ready", "S2_executed", 1);
	linkPlaceToTransition("P_thread_pool", "S3_ready", 1);
	linkTransitionToPlace("S3_ready", "S3_executed", 1);
	linkPlaceToTransition("C1_main", "C1_execution", 1);
	linkPlaceToTransition("P_thread_pool", "C1_execution", 1);
	linkTransitionToPlace("C1_execution", "C1_executed", 1);
	linkTransitionToPlace("C1_execution", "C1_sem", 1);
	linkPlaceToTransition("A_in_1", "A_execution", 1);
	linkPlaceToTransition("P_thread_pool", "A_execution", 1);
	linkTransitionToPlace("A_execution", "A_executed", 1);
	linkPlaceToTransition("P_Out_in_1", "P_Out_execution", 1);
	linkPlaceToTransition("P_thread_pool", "P_Out_execution", 1);
	linkTransitionToPlace("P_Out_execution", "P_Out_executed", 1);
	linkPlaceToTransition("P_main", "P_execution", 1);
	linkPlaceToTransition("P_thread_pool", "P_execution", 1);
	linkTransitionToPlace("P_execution", "P_executed", 1);
	linkPlaceToTransition("Act1_in_1", "Act1_execution", 1);
	linkPlaceToTransition("P_thread_pool", "Act1_execution", 1);
	linkTransitionToPlace("Act1_execution", "Act1_executed", 1);
	linkPlaceToTransition("Act2_in_1", "Act2_execution", 1);
	linkPlaceToTransition("P_thread_pool", "Act2_execution", 1);
	linkTransitionToPlace("Act2_execution", "Act2_executed", 1);
	linkPlaceToTransition("A3_in_1", "A3_execution", 1);
	linkPlaceToTransition("P_thread_pool", "A3_execution", 1);
	linkTransitionToPlace("A3_execution", "A3_executed", 1);
	linkPlaceToTransition("Binary_in_1", "Binary_execution", 1);
	linkTransitionToPlace("Binary_execution", "Binary_executed", 1);
	linkTransitionToPlace("Binary_execution", "Binary_in_data", 1);
	linkPlaceToTransition("S_out1", "con_sLc2", 1);
	linkTransitionToPlace("con_sLc2", "C1_in_1", 1);
	linkPlaceToTransition("C1_out1", "con_Vxs5", 1);
	linkTransitionToPlace("con_Vxs5", "A_in_1_1", 1);
	linkPlaceToTransition("C1_out2", "con_KSdj", 1);
	linkTransitionToPlace("con_KSdj", "A_in_2_1", 1);
	linkPlaceToTransition("P_In_out1", "con_bxwf", 1);
	linkTransitionToPlace("con_bxwf", "P_Out_in_1", 1);
	linkPlaceToTransition("S2_out1", "con_Q2pv", 1);
	linkTransitionToPlace("con_Q2pv", "P_in_2", 1);
	linkPlaceToTransition("S1_out1", "con_0ogb", 1);
	linkTransitionToPlace("con_0ogb", "P_in_1", 1);
	linkPlaceToTransition("P_out1", "con_9K4e", 1);
	linkTransitionToPlace("con_9K4e", "Act1_in_1", 1);
	linkPlaceToTransition("P_out2", "con_xgVM", 1);
	linkTransitionToPlace("con_xgVM", "Act2_in_1", 1);
	linkPlaceToTransition("S3_out1", "con_WnTU", 1);
	linkTransitionToPlace("con_WnTU", "Binary_in_1", 1);
	linkPlaceToTransition("Binary_out1", "con_uOSv", 1);
	linkTransitionToPlace("con_uOSv", "A3_in_1", 1);
	linkPlaceToTransition("C1_executed", "C1_post_execution", 1);
	linkTransitionToPlace("C1_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("C1_post_execution", "C1_out1", 1);
	linkTransitionToPlace("C1_post_execution", "C1_out2", 1);
	linkPlaceToTransition("C1_sem", "C1_ready", 1);
	linkPlaceToTransition("C1_in_1", "C1_ready", 1);
	linkTransitionToPlace("C1_ready", "C1_main", 1);
	linkPlaceToTransition("S_executed", "S_post_execution", 1);
	linkTransitionToPlace("S_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("S_post_execution", "S_out1", 1);
	linkPlaceToTransition("A_executed", "A_post_execution", 1);
	linkTransitionToPlace("A_post_execution", "P_thread_pool", 1);
	linkPlaceToTransition("A_in_1_1", "A_in_1_merge", 1);
	linkPlaceToTransition("A_in_2_1", "A_in_1_merge", 1);
	linkTransitionToPlace("A_in_1_merge", "A_in_1", 1);
	linkPlaceToTransition("P_In_executed", "P_In_post_execution", 1);
	linkTransitionToPlace("P_In_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("P_In_post_execution", "P_In_out1", 1);
	linkPlaceToTransition("P_Out_executed", "P_Out_post_execution", 1);
	linkTransitionToPlace("P_Out_post_execution", "P_thread_pool", 1);
	linkPlaceToTransition("P_executed", "P_post_execution", 1);
	linkTransitionToPlace("P_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("P_post_execution", "P_out1", 1);
	linkTransitionToPlace("P_post_execution", "P_out2", 1);
	linkPlaceToTransition("P_in_1", "P_ready", 1);
	linkPlaceToTransition("P_in_2", "P_ready", 1);
	linkTransitionToPlace("P_ready", "P_main", 1);
	linkPlaceToTransition("S1_executed", "S1_post_execution", 1);
	linkTransitionToPlace("S1_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("S1_post_execution", "S1_out1", 1);
	linkPlaceToTransition("S2_executed", "S2_post_execution", 1);
	linkTransitionToPlace("S2_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("S2_post_execution", "S2_out1", 1);
	linkPlaceToTransition("Act1_executed", "Act1_post_execution", 1);
	linkTransitionToPlace("Act1_post_execution", "P_thread_pool", 1);
	linkPlaceToTransition("Act2_executed", "Act2_post_execution", 1);
	linkTransitionToPlace("Act2_post_execution", "P_thread_pool", 1);
	linkPlaceToTransition("S3_executed", "S3_post_execution", 1);
	linkTransitionToPlace("S3_post_execution", "P_thread_pool", 1);
	linkTransitionToPlace("S3_post_execution", "S3_out1", 1);
	linkPlaceToTransition("A3_executed", "A3_post_execution", 1);
	linkTransitionToPlace("A3_post_execution", "P_thread_pool", 1);
	linkPlaceToTransition("Binary_executed", "Binary_post_execution", 1);
	linkTransitionToPlace("Binary_post_execution", "Binary_out1", 1);
	linkPlaceToTransition("Binary_in_data", "Binary_not_OOD", 1);
	linkTransitionToPlace("Binary_not_OOD", "Binary_data_gen", 1);
	linkPlaceToTransition("Binary_in_data", "Binary_OOD", 1);
	linkTransitionToPlace("Binary_OOD", "Binary_cf", 1);
	linkPlaceToTransition("Binary_data_gen", "Binary_ClassTruth", 1);
	linkTransitionToPlace("Binary_ClassTruth", "Binary_ct", 1);
	linkPlaceToTransition("Binary_data_gen", "Binary_ClassOther", 1);
	linkTransitionToPlace("Binary_ClassOther", "Binary_cf", 1);
	linkPlaceToTransition("Binary_ct", "Binary_ct_tp", 1);
	linkTransitionToPlace("Binary_ct_tp", "Binary_tp", 1);
	linkPlaceToTransition("Binary_ct", "Binary_ct_fn", 1);
	linkTransitionToPlace("Binary_ct_fn", "Binary_fn", 1);
	linkPlaceToTransition("Binary_cf", "Binary__cf_tn", 1);
	linkTransitionToPlace("Binary__cf_tn", "Binary_tn", 1);
	linkPlaceToTransition("Binary_cf", "Binary_cf_fp", 1);
	linkTransitionToPlace("Binary_cf_fp", "Binary_fp", 1);

	/* Measure objects will be added */
	//
	// ---- Measure 'C1_in_use' ----
	//
	measure_C1__in__use = new MeasureObj_C1__in__use(this);
	C1__sem->addMeasure(measure_C1__in__use);
	addMeasure(measure_C1__in__use);

	//
	// ---- Measure 'AReady' ----
	//
	measure_AReady = new MeasureObj_AReady(this);
	A__executed->addMeasure(measure_AReady);
	addMeasure(measure_AReady);

	//
	// ---- Measure 'Act1Ready' ----
	//
	measure_Act1Ready = new MeasureObj_Act1Ready(this);
	Act1__executed->addMeasure(measure_Act1Ready);
	addMeasure(measure_Act1Ready);

	//
	// ---- Measure 'Act2Ready' ----
	//
	measure_Act2Ready = new MeasureObj_Act2Ready(this);
	Act2__executed->addMeasure(measure_Act2Ready);
	addMeasure(measure_Act2Ready);

	//
	// ---- Measure 'A3Ready' ----
	//
	measure_A3Ready = new MeasureObj_A3Ready(this);
	A3__executed->addMeasure(measure_A3Ready);
	addMeasure(measure_A3Ready);

	//
	// ---- Measure 'Binary_accuracy' ----
	//
	measure_Binary__accuracy = new MeasureObj_Binary__accuracy(this);
	Binary__tp->addMeasure(measure_Binary__accuracy);
	Binary__tn->addMeasure(measure_Binary__accuracy);
	Binary__fp->addMeasure(measure_Binary__accuracy);
	Binary__fn->addMeasure(measure_Binary__accuracy);
	addMeasure(measure_Binary__accuracy);

	//
	// ---- Measure 'Binary_specificity' ----
	//
	measure_Binary__specificity = new MeasureObj_Binary__specificity(this);
	Binary__tn->addMeasure(measure_Binary__specificity);
	Binary__fp->addMeasure(measure_Binary__specificity);
	addMeasure(measure_Binary__specificity);

	//
	// ---- Measure 'Binary_recall' ----
	//
	measure_Binary__recall = new MeasureObj_Binary__recall(this);
	Binary__tp->addMeasure(measure_Binary__recall);
	Binary__fn->addMeasure(measure_Binary__recall);
	addMeasure(measure_Binary__recall);

	//
	// ---- Measure 'Binary_precision' ----
	//
	measure_Binary__precision = new MeasureObj_Binary__precision(this);
	Binary__tp->addMeasure(measure_Binary__precision);
	Binary__fp->addMeasure(measure_Binary__precision);
	addMeasure(measure_Binary__precision);

	//
	// ---- Measure 'Binary_f1Score' ----
	//
	measure_Binary__f1Score = new MeasureObj_Binary__f1Score(this);
	Binary__tp->addMeasure(measure_Binary__f1Score);
	Binary__fn->addMeasure(measure_Binary__f1Score);
	Binary__fp->addMeasure(measure_Binary__f1Score);
	addMeasure(measure_Binary__f1Score);


	/* Initial marking will be added */
	Token_int::addInitialTokens(P__thread__pool);
	Token_int::addInitialTokens(C1__sem);

}

void ImplementedNetClass::createTokens()
{
	/* Token werden gelesen */
	GMDB *connection = new GMDB;
	cout<<"... try to connect to the database : scpn ...\n";
	if(connection->DBConnect("scpn", "timenet", "timenet"))
	{
		cout << "... connected !\n";
		token_info_list tokens;
		token_reference_list refs;

		Token_Data::createTokensFromDB(this, connection,tokens,refs);
		cout << "All tokens created." << endl;
		connection->DBCloseConnect();

		cout << "connection closed." << endl;
		token_reference_list::iterator ref_it;
		for (ref_it=refs.begin(); ref_it!=refs.end(); ref_it++)
		{
			SMARTPTR(Token) t = Token::findToken(tokens,(*ref_it)->tokentypename.c_str(),(*ref_it)->id);
			(*ref_it)->token->setReferenceAttribute((*ref_it)->attributename.c_str(),t);
		}
		cout << "All token references replaced." << endl;

		int tokencount = 0;
		token_info_list::iterator tok_it;
		for (tok_it=tokens.begin(); tok_it!=tokens.end(); tok_it++)
		{
			Place *p = getPlace((*tok_it)->place_name.c_str());
			if (p != 0)
			{
				p->addToken((*tok_it)->token);
				tokencount++;
			}
			else
				cout<<"Could not find Place '"<<(*tok_it)->place_name<<"' for "<< (*tok_it)->token->content() << endl;
			delete (*tok_it);
		}
		cout << tokencount << " tokens added to the net." << endl;

		connection->DBCloseConnect();
	}
	delete connection;

}


SMARTPTR(Token) NetClass::copyToken(SMARTPTR(Token) oldToken)
{
	string tokenType = oldToken->getName();

	if (tokenType == "int")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_int) oldTokenPtr = UPCAST_MACRO(Token_int)(oldToken);

		// create new token and save smart pointer at it
		SMARTPTR(Token_int) newTokenPtr = NEW_MACRO(Token_int, Token_int(*oldTokenPtr, true));

		return newTokenPtr;
	}
	else if (tokenType == "Data")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_Data) oldTokenPtr = UPCAST_MACRO(Token_Data)(oldToken);

		// create new token and save smart pointer at it
		SMARTPTR(Token_Data) newTokenPtr = NEW_MACRO(Token_Data, Token_Data(*oldTokenPtr, true));

		return newTokenPtr;
	}
	return NULL;
}


SMARTPTR(Token) NetClass::upcastToken(SMARTPTR(Token) token)
{
	string tokenType = token->getName();

	if (tokenType == "int")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_int) newTokenPtr = UPCAST_MACRO(Token_int)(token);

		return newTokenPtr;
	}
	else if (tokenType == "Data")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_Data) newTokenPtr = UPCAST_MACRO(Token_Data)(token);

		return newTokenPtr;
	}
	return NULL;
}


/* ********   The Main Function   ******** */

int main(int argc, char *argv[])
{
	MainClass *m = new MainClass;
	m->main(argc, argv);
	delete m;
	return 0;
}
 /* END */
