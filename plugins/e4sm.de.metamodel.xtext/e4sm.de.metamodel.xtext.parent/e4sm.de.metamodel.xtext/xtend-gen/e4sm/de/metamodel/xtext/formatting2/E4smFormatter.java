/**
 * generated by Xtext 2.26.0
 */
package e4sm.de.metamodel.xtext.formatting2;

import e4sm.de.metamodel.e4sm.Actor;
import e4sm.de.metamodel.e4sm.Component;
import e4sm.de.metamodel.e4sm.Connector;
import e4sm.de.metamodel.e4sm.Model;
import e4sm.de.metamodel.e4sm.Person;
import e4sm.de.metamodel.e4sm.Pin;
import e4sm.de.metamodel.e4sm.Sector;
import e4sm.de.metamodel.e4sm.core.TypeSpecification;
import e4sm.de.metamodel.xtext.services.E4smGrammarAccess;
import java.util.Arrays;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class E4smFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private E4smGrammarAccess _e4smGrammarAccess;

  protected void _format(final Model model, @Extension final IFormattableDocument doc) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(model).keyword("import"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(model).keyword("package"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(model).keyword("type"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    doc.prepend(this.textRegionExtensions.regionFor(model).keyword("person"), _function_3);
    EList<e4sm.de.metamodel.e4sm.Package> _packages = model.getPackages();
    for (final e4sm.de.metamodel.e4sm.Package _package : _packages) {
      this.format(_package, doc);
    }
    EList<Actor> _actors = model.getActors();
    for (final Actor actor : _actors) {
      this.format(actor, doc);
    }
    EList<TypeSpecification> _types = model.getTypes();
    for (final TypeSpecification ts : _types) {
      this.format(ts, doc);
    }
  }

  protected void _format(final e4sm.de.metamodel.e4sm.Package _package, @Extension final IFormattableDocument doc) {
    EList<Component> _components = _package.getComponents();
    for (final Component component : _components) {
      this.format(component, doc);
    }
    EList<Connector> _connectors = _package.getConnectors();
    for (final Connector connector : _connectors) {
      this.format(connector, doc);
    }
    EList<Sector> _sectors = _package.getSectors();
    for (final Sector sector : _sectors) {
      this.format(sector, doc);
    }
    EList<e4sm.de.metamodel.e4sm.Package> _packages = _package.getPackages();
    for (final e4sm.de.metamodel.e4sm.Package __package : _packages) {
      this.format(__package, doc);
    }
    final ISemanticRegion open = this.textRegionExtensions.regionFor(_package).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(_package).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    doc.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
  }

  protected void _format(final Component _component, @Extension final IFormattableDocument doc) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("component"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("actuator"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("sensor"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("mlComponent"), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("physicalComponent"), _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("softwareComponent"), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("heuristic"), _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("function"), _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("externalDependency"), _function_8);
    final Procedure1<IHiddenRegionFormatter> _function_9 = (IHiddenRegionFormatter it) -> {
      it.setSpace(" ");
    };
    doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("{"), _function_9);
    final Procedure1<IHiddenRegionFormatter> _function_10 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_11 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_12 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    doc.<ISemanticRegion, ISemanticRegion>interior(
      doc.append(this.textRegionExtensions.regionFor(_component).keyword("{"), _function_10), 
      doc.prepend(this.textRegionExtensions.regionFor(_component).keyword("}"), _function_11), _function_12);
    EList<Pin> _pins = _component.getPins();
    for (final Pin pin : _pins) {
      {
        this.format(pin, doc);
        final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        doc.<Pin>prepend(pin, _function_13);
      }
    }
    EList<Component> _components = _component.getComponents();
    for (final Component childComponent : _components) {
      {
        this.format(childComponent, doc);
        final Procedure1<IHiddenRegionFormatter> _function_13 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        doc.<Component>prepend(childComponent, _function_13);
      }
    }
  }

  protected void _format(final Pin _pin, @Extension final IFormattableDocument doc) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_pin).keyword("in"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_pin).keyword("out"), _function_1);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(_pin).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(_pin).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.append(open, _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(close, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    doc.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
  }

  protected void _format(final Connector _connector, @Extension final IFormattableDocument doc) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    doc.append(doc.prepend(this.textRegionExtensions.regionFor(_connector).keyword("connector"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    doc.append(doc.prepend(this.textRegionExtensions.regionFor(_connector).keyword("physicalConnector"), _function_2), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    doc.append(doc.prepend(this.textRegionExtensions.regionFor(_connector).keyword("logicalConnector"), _function_4), _function_5);
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    doc.surround(this.textRegionExtensions.regionFor(_connector).keyword(","), _function_6);
  }

  protected void _format(final Person _person, @Extension final IFormattableDocument doc) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    doc.append(doc.prepend(this.textRegionExtensions.regionFor(_person).keyword("person"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    doc.surround(this.textRegionExtensions.regionFor(_person).keyword(","), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_person).keyword("department"), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_person).keyword("pictureFileName"), _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(this.textRegionExtensions.regionFor(_person).keyword("responsibleForComponents"), _function_5);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(_person).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(_person).keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.append(open, _function_6);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.prepend(close, _function_7);
    final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    doc.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_8);
  }

  protected void _format(final TypeSpecification _typeSpec, @Extension final IFormattableDocument doc) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    doc.append(doc.surround(this.textRegionExtensions.regionFor(_typeSpec).keyword(","), _function), _function_1);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(_typeSpec).keyword("{");
    final ISemanticRegion close = this.textRegionExtensions.regionFor(_typeSpec).keyword("}");
    boolean _isEmpty = _typeSpec.getAttributes().isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.append(open, _function_2);
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      doc.prepend(close, _function_3);
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      doc.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_4);
    }
  }

  public void format(final Object _person, final IFormattableDocument doc) {
    if (_person instanceof Person) {
      _format((Person)_person, doc);
      return;
    } else if (_person instanceof Pin) {
      _format((Pin)_person, doc);
      return;
    } else if (_person instanceof Component) {
      _format((Component)_person, doc);
      return;
    } else if (_person instanceof Connector) {
      _format((Connector)_person, doc);
      return;
    } else if (_person instanceof Model) {
      _format((Model)_person, doc);
      return;
    } else if (_person instanceof e4sm.de.metamodel.e4sm.Package) {
      _format((e4sm.de.metamodel.e4sm.Package)_person, doc);
      return;
    } else if (_person instanceof TypeSpecification) {
      _format((TypeSpecification)_person, doc);
      return;
    } else if (_person instanceof XtextResource) {
      _format((XtextResource)_person, doc);
      return;
    } else if (_person instanceof EObject) {
      _format((EObject)_person, doc);
      return;
    } else if (_person == null) {
      _format((Void)null, doc);
      return;
    } else if (_person != null) {
      _format(_person, doc);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(_person, doc).toString());
    }
  }
}
