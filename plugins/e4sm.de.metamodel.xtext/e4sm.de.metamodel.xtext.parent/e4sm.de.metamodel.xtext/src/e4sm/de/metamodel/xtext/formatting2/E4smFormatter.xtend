/*
 * generated by Xtext 2.26.0
 */
package e4sm.de.metamodel.xtext.formatting2

import com.google.inject.Inject
import e4sm.de.metamodel.e4sm.Model
import e4sm.de.metamodel.xtext.services.E4smGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class E4smFormatter extends AbstractFormatter2 {

	@Inject extension E4smGrammarAccess

	def dispatch void format(Model model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (_package : model.packages) {
			_package.format
		}
		for (actor : model.actors) {
			actor.format
		}
	}

	def dispatch void format(e4sm.de.metamodel.e4sm.Package _package, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (component : _package.components) {
			component.format
		}
		for (connector : _package.connectors) {
			connector.format
		}
		for (sector : _package.sectors) {
			sector.format
		}
		for (__package : _package.packages) {
			__package.format
		}
	}

	def dispatch void format(e4sm.de.metamodel.e4sm.Component _component, extension IFormattableDocument document) {
		_component.regionFor.keyword('{').prepend[space = " "]
		interior(
			_component.regionFor.keyword('{').append[newLine],
			_component.regionFor.keyword('}'),
			[indent]
		)

		for (pin : _component.pins) {
			pin.format(document)
			pin.prepend[indent]
		}
	}

	def dispatch void format(e4sm.de.metamodel.e4sm.Pin _pin, extension IFormattableDocument document) {
		_pin.regionFor.keyword('in').prepend[newLine]
		_pin.regionFor.keyword('out').prepend[newLine]
		val open = _pin.regionFor.keyword('{')
		val close = _pin.regionFor.keyword('}')
		open.append[newLine]
		close.prepend[newLine]
		interior(open, close)[indent]
	}

// TODO: implement for EDataType, EClass, EAnnotation, ETypeParameter, EEnum, EGenericType, EEnumLiteral, EOperation, EParameter, EAttribute, EReference, Component, Sector, MachineLearningComponent, PhysicalComponent, SoftwareComponent, Heuristic, Function, ExternalDependency, Sensor, Actuator
}
