/***************************************************

   buildnet.cpp - generated by CodeGenerator r$Rev$

****************************************************/

#include "MSVCC.h"
#include "MainClass.h"
#include "ImplementedNetClass.h"
#include "Transition.h"
#include "Token.h"
#include "Place.h"
#include "Transition_Video__ready.h"
#include "Transition_Canny__execution.h"
#include "Transition_Output__execution.h"
#include "Transition_con__2sMS.h"
#include "Transition_con__mC6n.h"
#include "Transition_Canny__post__execution.h"
#include "Transition_Canny__ready.h"
#include "Transition_Video__post__execution.h"
#include "Transition_Output__post__execution.h"
#include "Transition_Output__ready.h"
#include "MeasureObj_Execution__thread__pool__in__use.h"
#include "Token_Data.h"


void ImplementedNetClass::buildNet()
{

	/* Places will be added */
	//
	// ---- Place 'Execution_thread_pool' ----
	//
	Place *Execution__thread__pool;
	Execution__thread__pool = new Place(1, "Execution_thread_pool", this, false, (unsigned int)(0.0));
	Execution__thread__pool->setWatch(false);
	addPlace(Execution__thread__pool);

	//
	// ---- Place 'Canny_executed' ----
	//
	Place *Canny__executed;
	Canny__executed = new Place(2, "Canny_executed", this, false, (unsigned int)(0.0));
	Canny__executed->setWatch(false);
	addPlace(Canny__executed);

	//
	// ---- Place 'Canny_main' ----
	//
	Place *Canny__main;
	Canny__main = new Place(3, "Canny_main", this, false, (unsigned int)(0.0));
	Canny__main->setWatch(false);
	addPlace(Canny__main);

	//
	// ---- Place 'Canny_in_1' ----
	//
	Place *Canny__in__1;
	Canny__in__1 = new Place(4, "Canny_in_1", this, false, (unsigned int)(0.0));
	Canny__in__1->setWatch(false);
	addPlace(Canny__in__1);

	//
	// ---- Place 'Canny_out1' ----
	//
	Place *Canny__out1;
	Canny__out1 = new Place(5, "Canny_out1", this, false, (unsigned int)(0.0));
	Canny__out1->setWatch(false);
	addPlace(Canny__out1);

	//
	// ---- Place 'Video_executed' ----
	//
	Place *Video__executed;
	Video__executed = new Place(6, "Video_executed", this, false, (unsigned int)(0.0));
	Video__executed->setWatch(false);
	addPlace(Video__executed);

	//
	// ---- Place 'Video_out1' ----
	//
	Place *Video__out1;
	Video__out1 = new Place(7, "Video_out1", this, false, (unsigned int)(0.0));
	Video__out1->setWatch(false);
	addPlace(Video__out1);

	//
	// ---- Place 'Output_executed' ----
	//
	Place *Output__executed;
	Output__executed = new Place(8, "Output_executed", this, false, (unsigned int)(0.0));
	Output__executed->setWatch(false);
	addPlace(Output__executed);

	//
	// ---- Place 'Output_main' ----
	//
	Place *Output__main;
	Output__main = new Place(9, "Output_main", this, false, (unsigned int)(0.0));
	Output__main->setWatch(false);
	addPlace(Output__main);

	//
	// ---- Place 'Output_in_1' ----
	//
	Place *Output__in__1;
	Output__in__1 = new Place(10, "Output_in_1", this, false, (unsigned int)(0.0));
	Output__in__1->setWatch(false);
	addPlace(Output__in__1);


	/* Transitions will be added*/
	//
	// ---- Transition 'Video_ready' ----
	//
	PlaceIdentMap places_Video__ready;
	places_Video__ready.insert(make_pair(string("Execution_thread_pool"),string("Execution_thread_pool")));
	places_Video__ready.insert(make_pair(string("Video_executed"),string("Video_executed")));

	Transition *Video__ready;
	Video__ready = new Transition_Video__ready(1, "Video_ready", this, places_Video__ready, "", 0, 0, true, false, false, false);

	Video__ready->setDisplaying(false);
	Video__ready->setWatch(true);
	Video__ready->setImmediate(false);
	Video__ready->setLogfile("", "");
	addTransition(Video__ready);

	//
	// ---- Transition 'Canny_execution' ----
	//
	PlaceIdentMap places_Canny__execution;
	places_Canny__execution.insert(make_pair(string("Canny_main"),string("Canny_main")));
	places_Canny__execution.insert(make_pair(string("Canny_executed"),string("Canny_executed")));

	Transition *Canny__execution;
	Canny__execution = new Transition_Canny__execution(2, "Canny_execution", this, places_Canny__execution, "", 0, 0, true, false, false, false);

	Canny__execution->setDisplaying(false);
	Canny__execution->setWatch(false);
	Canny__execution->setImmediate(false);
	Canny__execution->setLogfile("", "");
	addTransition(Canny__execution);

	//
	// ---- Transition 'Output_execution' ----
	//
	PlaceIdentMap places_Output__execution;
	places_Output__execution.insert(make_pair(string("Output_main"),string("Output_main")));
	places_Output__execution.insert(make_pair(string("Output_executed"),string("Output_executed")));

	Transition *Output__execution;
	Output__execution = new Transition_Output__execution(3, "Output_execution", this, places_Output__execution, "", 0, 0, true, false, false, false);

	Output__execution->setDisplaying(false);
	Output__execution->setWatch(false);
	Output__execution->setImmediate(false);
	Output__execution->setLogfile("", "");
	addTransition(Output__execution);

	//
	// ---- Transition 'con_2sMS' ----
	//
	PlaceIdentMap places_con__2sMS;
	places_con__2sMS.insert(make_pair(string("Video_out1"),string("Video_out1")));
	places_con__2sMS.insert(make_pair(string("Canny_in_1"),string("Canny_in_1")));

	Transition *con__2sMS;
	con__2sMS = new Transition_con__2sMS(4, "con_2sMS", this, places_con__2sMS, "", 0, 0, true, false, false, false);

	con__2sMS->setDisplaying(false);
	con__2sMS->setWatch(false);
	con__2sMS->setImmediate(false);
	con__2sMS->setLogfile("", "");
	addTransition(con__2sMS);

	//
	// ---- Transition 'con_mC6n' ----
	//
	PlaceIdentMap places_con__mC6n;
	places_con__mC6n.insert(make_pair(string("Canny_out1"),string("Canny_out1")));
	places_con__mC6n.insert(make_pair(string("Output_in_1"),string("Output_in_1")));

	Transition *con__mC6n;
	con__mC6n = new Transition_con__mC6n(5, "con_mC6n", this, places_con__mC6n, "", 0, 0, true, false, false, false);

	con__mC6n->setDisplaying(false);
	con__mC6n->setWatch(false);
	con__mC6n->setImmediate(false);
	con__mC6n->setLogfile("", "");
	addTransition(con__mC6n);

	//
	// ---- Transition 'Canny_post_execution' ----
	//
	PlaceIdentMap places_Canny__post__execution;
	places_Canny__post__execution.insert(make_pair(string("Canny_executed"),string("Canny_executed")));
	places_Canny__post__execution.insert(make_pair(string("Execution_thread_pool"),string("Execution_thread_pool")));
	places_Canny__post__execution.insert(make_pair(string("Canny_out1"),string("Canny_out1")));

	Transition *Canny__post__execution;
	Canny__post__execution = new Transition_Canny__post__execution(6, "Canny_post_execution", this, places_Canny__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	Canny__post__execution->setDisplaying(false);
	Canny__post__execution->setWatch(false);
	Canny__post__execution->setImmediate(true);
	Canny__post__execution->setLogfile("", "");
	addTransition(Canny__post__execution);

	//
	// ---- Transition 'Canny_ready' ----
	//
	PlaceIdentMap places_Canny__ready;
	places_Canny__ready.insert(make_pair(string("Execution_thread_pool"),string("Execution_thread_pool")));
	places_Canny__ready.insert(make_pair(string("Canny_in_1"),string("Canny_in_1")));
	places_Canny__ready.insert(make_pair(string("Canny_main"),string("Canny_main")));

	Transition *Canny__ready;
	Canny__ready = new Transition_Canny__ready(7, "Canny_ready", this, places_Canny__ready, "", 1.0, (int)1.0, false, false, false, false);

	Canny__ready->setDisplaying(false);
	Canny__ready->setWatch(false);
	Canny__ready->setImmediate(true);
	Canny__ready->setLogfile("", "");
	addTransition(Canny__ready);

	//
	// ---- Transition 'Video_post_execution' ----
	//
	PlaceIdentMap places_Video__post__execution;
	places_Video__post__execution.insert(make_pair(string("Video_executed"),string("Video_executed")));
	places_Video__post__execution.insert(make_pair(string("Execution_thread_pool"),string("Execution_thread_pool")));
	places_Video__post__execution.insert(make_pair(string("Video_out1"),string("Video_out1")));

	Transition *Video__post__execution;
	Video__post__execution = new Transition_Video__post__execution(8, "Video_post_execution", this, places_Video__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	Video__post__execution->setDisplaying(false);
	Video__post__execution->setWatch(false);
	Video__post__execution->setImmediate(true);
	Video__post__execution->setLogfile("", "");
	addTransition(Video__post__execution);

	//
	// ---- Transition 'Output_post_execution' ----
	//
	PlaceIdentMap places_Output__post__execution;
	places_Output__post__execution.insert(make_pair(string("Output_executed"),string("Output_executed")));
	places_Output__post__execution.insert(make_pair(string("Execution_thread_pool"),string("Execution_thread_pool")));

	Transition *Output__post__execution;
	Output__post__execution = new Transition_Output__post__execution(9, "Output_post_execution", this, places_Output__post__execution, "", 1.0, (int)1.0, false, false, false, false);

	Output__post__execution->setDisplaying(false);
	Output__post__execution->setWatch(false);
	Output__post__execution->setImmediate(true);
	Output__post__execution->setLogfile("", "");
	addTransition(Output__post__execution);

	//
	// ---- Transition 'Output_ready' ----
	//
	PlaceIdentMap places_Output__ready;
	places_Output__ready.insert(make_pair(string("Execution_thread_pool"),string("Execution_thread_pool")));
	places_Output__ready.insert(make_pair(string("Output_in_1"),string("Output_in_1")));
	places_Output__ready.insert(make_pair(string("Output_main"),string("Output_main")));

	Transition *Output__ready;
	Output__ready = new Transition_Output__ready(10, "Output_ready", this, places_Output__ready, "", 1.0, (int)1.0, false, false, false, false);

	Output__ready->setDisplaying(false);
	Output__ready->setWatch(false);
	Output__ready->setImmediate(true);
	Output__ready->setLogfile("", "");
	addTransition(Output__ready);


	/* Transitionen will be linked*/
	linkPlaceToTransition("Execution_thread_pool", "Video_ready", 1);
	linkTransitionToPlace("Video_ready", "Video_executed", 1);
	linkPlaceToTransition("Canny_main", "Canny_execution", 1);
	linkTransitionToPlace("Canny_execution", "Canny_executed", 1);
	linkPlaceToTransition("Output_main", "Output_execution", 1);
	linkTransitionToPlace("Output_execution", "Output_executed", 1);
	linkPlaceToTransition("Video_out1", "con_2sMS", 1);
	linkTransitionToPlace("con_2sMS", "Canny_in_1", 1);
	linkPlaceToTransition("Canny_out1", "con_mC6n", 1);
	linkTransitionToPlace("con_mC6n", "Output_in_1", 1);
	linkPlaceToTransition("Canny_executed", "Canny_post_execution", 1);
	linkTransitionToPlace("Canny_post_execution", "Execution_thread_pool", 1);
	linkTransitionToPlace("Canny_post_execution", "Canny_out1", 1);
	linkPlaceToTransition("Execution_thread_pool", "Canny_ready", 1);
	linkPlaceToTransition("Canny_in_1", "Canny_ready", 1);
	linkTransitionToPlace("Canny_ready", "Canny_main", 1);
	linkPlaceToTransition("Video_executed", "Video_post_execution", 1);
	linkTransitionToPlace("Video_post_execution", "Execution_thread_pool", 1);
	linkTransitionToPlace("Video_post_execution", "Video_out1", 1);
	linkPlaceToTransition("Output_executed", "Output_post_execution", 1);
	linkTransitionToPlace("Output_post_execution", "Execution_thread_pool", 1);
	linkPlaceToTransition("Execution_thread_pool", "Output_ready", 1);
	linkPlaceToTransition("Output_in_1", "Output_ready", 1);
	linkTransitionToPlace("Output_ready", "Output_main", 1);

	/* Measure objects will be added */
	//
	// ---- Measure 'Execution_thread_pool_in_use' ----
	//
	measure_Execution__thread__pool__in__use = new MeasureObj_Execution__thread__pool__in__use(this);
	Execution__thread__pool->addMeasure(measure_Execution__thread__pool__in__use);
	addMeasure(measure_Execution__thread__pool__in__use);


	/* Initial marking will be added */
	Token_int::addInitialTokens(Execution__thread__pool);

}

void ImplementedNetClass::createTokens()
{
	/* Token werden gelesen */
	GMDB *connection = new GMDB;
	cout<<"... try to connect to the database : scpn ...\n";
	if(connection->DBConnect("scpn", "timenet", "timenet"))
	{
		cout << "... connected !\n";
		token_info_list tokens;
		token_reference_list refs;

		Token_Data::createTokensFromDB(this, connection,tokens,refs);
		cout << "All tokens created." << endl;
		connection->DBCloseConnect();

		cout << "connection closed." << endl;
		token_reference_list::iterator ref_it;
		for (ref_it=refs.begin(); ref_it!=refs.end(); ref_it++)
		{
			SMARTPTR(Token) t = Token::findToken(tokens,(*ref_it)->tokentypename.c_str(),(*ref_it)->id);
			(*ref_it)->token->setReferenceAttribute((*ref_it)->attributename.c_str(),t);
		}
		cout << "All token references replaced." << endl;

		int tokencount = 0;
		token_info_list::iterator tok_it;
		for (tok_it=tokens.begin(); tok_it!=tokens.end(); tok_it++)
		{
			Place *p = getPlace((*tok_it)->place_name.c_str());
			if (p != 0)
			{
				p->addToken((*tok_it)->token);
				tokencount++;
			}
			else
				cout<<"Could not find Place '"<<(*tok_it)->place_name<<"' for "<< (*tok_it)->token->content() << endl;
			delete (*tok_it);
		}
		cout << tokencount << " tokens added to the net." << endl;

		connection->DBCloseConnect();
	}
	delete connection;

}


SMARTPTR(Token) NetClass::copyToken(SMARTPTR(Token) oldToken)
{
	string tokenType = oldToken->getName();

	if (tokenType == "int")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_int) oldTokenPtr = UPCAST_MACRO(Token_int)(oldToken);

		// create new token and save smart pointer at it
		SMARTPTR(Token_int) newTokenPtr = NEW_MACRO(Token_int, Token_int(*oldTokenPtr, true));

		return newTokenPtr;
	}
	else if (tokenType == "Data")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_Data) oldTokenPtr = UPCAST_MACRO(Token_Data)(oldToken);

		// create new token and save smart pointer at it
		SMARTPTR(Token_Data) newTokenPtr = NEW_MACRO(Token_Data, Token_Data(*oldTokenPtr, true));

		return newTokenPtr;
	}
	return NULL;
}


SMARTPTR(Token) NetClass::upcastToken(SMARTPTR(Token) token)
{
	string tokenType = token->getName();

	if (tokenType == "int")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_int) newTokenPtr = UPCAST_MACRO(Token_int)(token);

		return newTokenPtr;
	}
	else if (tokenType == "Data")
	{
		// make an UPCAST to get a smart pointer at derived object
		SMARTPTR(Token_Data) newTokenPtr = UPCAST_MACRO(Token_Data)(token);

		return newTokenPtr;
	}
	return NULL;
}


/* ********   The Main Function   ******** */

int main(int argc, char *argv[])
{
	MainClass *m = new MainClass;
	m->main(argc, argv);
	delete m;
	return 0;
}
 /* END */
