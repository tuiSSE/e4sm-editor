/************************************************************

	MeasureObj_Binary__f1Score.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_Data.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"
#include "MeasureObj_fsdf.h"
#include "MeasureObj_PlaceTP.h"

MeasureObj_Binary__f1Score* measure_Binary__f1Score;

MeasureObj_Binary__f1Score::MeasureObj_Binary__f1Score(NetClass* net) : MeasureObj("Binary_f1Score", net, false)
{
}

double MeasureObj_Binary__f1Score::measure(double dt=-1)
{
	// Orig Expression: #Binary_tp / (0.00000001 + #Binary_tp +(#Binary_fn + #Binary_fp)/2.0)
	// C++  Expression: #P000058/ ( 1.0E-8+#P000059+ ( #P000060+#P000061 ) /2.0 ) 
	Place *P000058 = net->getPlace("Binary_tp");
	Place *P000059 = net->getPlace("Binary_tp");
	Place *P000060 = net->getPlace("Binary_fn");
	Place *P000061 = net->getPlace("Binary_fp");

	double rate = (P000058->getMarkingSize()/ ( 1.0E-8+P000059->getMarkingSize()+ ( P000060->getMarkingSize()+P000061->getMarkingSize() ) /2.0 ) );

	return rate;
}

void MeasureObj_Binary__f1Score::accum(const Binding *binding, double weight) {}
MeasureObj_Binary__f1Score::~MeasureObj_Binary__f1Score()
{
}

