/************************************************************

	MeasureObj_A3Ready.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_Data.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_AReady.h"
#include "MeasureObj_Act1Ready.h"
#include "MeasureObj_Act2Ready.h"
#include "MeasureObj_A3Ready.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"

MeasureObj_A3Ready* measure_A3Ready;

MeasureObj_A3Ready::MeasureObj_A3Ready(NetClass* net) : MeasureObj("A3Ready", net, true)
{
	firstTime = lastTime = 0;
	value = 0;
}

double MeasureObj_A3Ready::measure(double dt=-1)
{
	return value;
}

void MeasureObj_A3Ready::accum(const Binding *binding, double weight) {
	const DateTime &t = binding->getTime();
	double dt = t.FullDateTime() - lastTime;
	lastTime = t.FullDateTime();

	// Orig Expression: #A3_executed
	// C++  Expression: #P000033
	Place *P000033 = net->getPlace("A3_executed");

	const Transition *trans = binding->getBoundTransition();
	const TokenList *tokens = binding->getBoundTokens();

	double rate = (P000033->getMarkingSize());

	value += weight * dt * rate;
}

MeasureObj_A3Ready::~MeasureObj_A3Ready()
{
}

