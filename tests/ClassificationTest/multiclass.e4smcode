model multiclassModel{
	package p1 {
	sensor "s1" {
		out s1_out
		generates P, Q, R, S, A, B, C, D, E
	},
		multiclassClassificationComponent "mc" {
		in m1_in,
		out m2_out
			confusionMatrixes {  
				confusion matrix nine {
					P P:10,	P Q:13,	P R:19,	P S:25,	P A:1,	P B:1,	P C:1,	P D:1,	P E:1,
					Q P:5,	Q Q:545,	Q R:15,	Q S:20,	Q A:1,	Q B:1,	Q C:1,	Q D:1,	Q E:1,
					R P:166,	R Q:90,	R R:11,	R S:5,	R A:1,	R B:1,	R C:1,	R D:1,	R E:1,
					S P:4,	S Q:1,	S R:5,	S S:3,	S A:1,	S B:1,	S C:1,	S D:1,	S E:1,
					A P:5,	A Q:1,	A R:1,	A S:1,	A A:1,	A B:1,	A C:1,	A D:1,	A E:1,
					B P:2,	B Q:1,	B R:1,	B S:1,	B A:1,	B B:1,	B C:1,	B D:1,	B E:1,
					C P:2,	C Q:1,	C R:1,	C S:1,	C A:1,	C B:1,	C C:1,	C D:1,	C E:1,
					D P:3,	D Q:1,	D R:1,	D S:1,	D A:1,	D B:1,	D C:1,	D D:1,	D E:1,
					E P:4,	E Q:1,	E R:1,	E S:1,	E A:1,	E B:1,	E C:1,	E D:1,	E E:1
				},
				confusion matrix simple {
					P P:10,	P Q:13,	P R:19,	P S:25,
					Q P:5,	Q Q:545,	Q R:15,	Q S:20,
					R P:166,	R Q:90,	R R:11,	R S:5,
					S P:4,	S Q:1,	S R:5,	S S:3
				}
			}
		},
	actuator a1 {
		in a1_in
	}
	connector c1 "s1.s1_out" -> "mc.m1_in",
	connector c2 "mc.m2_out" -> "a1.a1_in"
	}
	
	// Classification classes
	cl P, cl Q, cl R, cl S, cl A, cl B, cl C, cl D, cl E
	
	environment e1 {
		P 0.15,
		Q 0.10,
		R 0.01,
		S 0.59,
		A 0.01,
		B 0.02,
		C 0.03,
		D 0.04,
		E 0.04,
		OOD 0.01
	}
}