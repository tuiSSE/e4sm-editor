/**
 */
package e4sm.de.metamodel.e4sm.analysis.provider;

import e4sm.de.metamodel.e4sm.analysis.util.AnalysisAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AnalysisItemProviderAdapterFactory extends AnalysisAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AnalysisItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.AnalysisManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisManagerItemProvider analysisManagerItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.AnalysisManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisManagerAdapter() {
		if (analysisManagerItemProvider == null) {
			analysisManagerItemProvider = new AnalysisManagerItemProvider(this);
		}

		return analysisManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.AnalysisDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalysisDefinitionItemProvider analysisDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.AnalysisDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalysisDefinitionAdapter() {
		if (analysisDefinitionItemProvider == null) {
			analysisDefinitionItemProvider = new AnalysisDefinitionItemProvider(this);
		}

		return analysisDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.ParameterDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterDefinitionItemProvider parameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.ParameterDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterDefinitionAdapter() {
		if (parameterDefinitionItemProvider == null) {
			parameterDefinitionItemProvider = new ParameterDefinitionItemProvider(this);
		}

		return parameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.MemoryLessGraphAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryLessGraphAnalysisItemProvider memoryLessGraphAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.MemoryLessGraphAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryLessGraphAnalysisAdapter() {
		if (memoryLessGraphAnalysisItemProvider == null) {
			memoryLessGraphAnalysisItemProvider = new MemoryLessGraphAnalysisItemProvider(this);
		}

		return memoryLessGraphAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.EntireGraphAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntireGraphAnalysisItemProvider entireGraphAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.EntireGraphAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntireGraphAnalysisAdapter() {
		if (entireGraphAnalysisItemProvider == null) {
			entireGraphAnalysisItemProvider = new EntireGraphAnalysisItemProvider(this);
		}

		return entireGraphAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.PackageAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PackageAnalysisItemProvider packageAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.PackageAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPackageAnalysisAdapter() {
		if (packageAnalysisItemProvider == null) {
			packageAnalysisItemProvider = new PackageAnalysisItemProvider(this);
		}

		return packageAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.PreviousNodeGraphAnalysis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreviousNodeGraphAnalysisItemProvider previousNodeGraphAnalysisItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.PreviousNodeGraphAnalysis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreviousNodeGraphAnalysisAdapter() {
		if (previousNodeGraphAnalysisItemProvider == null) {
			previousNodeGraphAnalysisItemProvider = new PreviousNodeGraphAnalysisItemProvider(this);
		}

		return previousNodeGraphAnalysisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.Variant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariantItemProvider variantItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.Variant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariantAdapter() {
		if (variantItemProvider == null) {
			variantItemProvider = new VariantItemProvider(this);
		}

		return variantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.analysis.NetworkGenerator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkGeneratorItemProvider networkGeneratorItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.analysis.NetworkGenerator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkGeneratorAdapter() {
		if (networkGeneratorItemProvider == null) {
			networkGeneratorItemProvider = new NetworkGeneratorItemProvider(this);
		}

		return networkGeneratorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (analysisManagerItemProvider != null)
			analysisManagerItemProvider.dispose();
		if (analysisDefinitionItemProvider != null)
			analysisDefinitionItemProvider.dispose();
		if (parameterDefinitionItemProvider != null)
			parameterDefinitionItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (memoryLessGraphAnalysisItemProvider != null)
			memoryLessGraphAnalysisItemProvider.dispose();
		if (entireGraphAnalysisItemProvider != null)
			entireGraphAnalysisItemProvider.dispose();
		if (packageAnalysisItemProvider != null)
			packageAnalysisItemProvider.dispose();
		if (previousNodeGraphAnalysisItemProvider != null)
			previousNodeGraphAnalysisItemProvider.dispose();
		if (variantItemProvider != null)
			variantItemProvider.dispose();
		if (networkGeneratorItemProvider != null)
			networkGeneratorItemProvider.dispose();
	}

}
