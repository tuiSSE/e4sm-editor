model Exec{
	//import "platform:/plugin/e4sm.de.metamodel.primarytypes/PrimaryTypes.e4sm#PrimaryTypes";
	import "PrimaryTypes";
	type Frame{
		int pixelSize,
		double dataSize
	}
// TODO: 
// Reference to input => done
// attribute access "x.s" => done
// parameters (e.g. convert_mode) 
	package Execution2{
	processingUnits : -1
	function Canny {
		takes Det(-1.5366062230611508 +  7.133349248009131e-06 * $canny_in.pixelSize + 0.37520054070705516 * 3)
		in Frame canny_in,
		out Frame canny_out
		//runs {
		//	var size = 1280 * 1024; //in_sc.s; => At the beginning just simple data types
		//	const canny_aperture = 3; // a fixed parameter
			// compute a value for the output (in this case, the execution time)
		//	canny_out = -1.5366062230611508 + 7.133349248009131e-06 * size + 0.37520054070705516 * canny_aperture;
	    // time(canny_out) = -1.5366062230611508 + 7.133349248009131e-06 * in_sc.s + 0.37520054070705516 * $canny_aperture)
	//}
	numberOfServers 2
	} ,
	function Convert {
		takes Det(-0.6242959829999677 + 1.0779985844740488e-06 * 333 + 0.02518848418089325 * 
			888 + -2.2917778785824794e-13 * (333 * 333) 
			+ 1.3364467951928866e-06 * 333 * 888 + 0.05037695303642168 * 888 * 888)
		in Frame conv_in,
		out Frame conv_out
	/* runs {
	 * 	var size = 10243443; //conv_in.s;
	 * 	const convert_mode = 1;
	 * 	conv_out = -0.6242959829999677 + 1.0779985844740488e-06 * size + 0.02518848418089325 * 
	 * 	convert_mode + -2.2917778785824794e-13 * (size * size) 
	 * 	+ 1.3364467951928866e-06 * size * convert_mode + 0.05037695303642168 * convert_mode * convert_mode;
	 * 	
	 * 	// conv_out = -0.6242959829999677 + 1.0779985844740488e-06 * x.s + 0.02518848418089325 * $convert_mode + -2.2917778785824794e-13 * (x.s*x.s) + 1.3364467951928866e-06 * x.s * $convert_mode + 0.05037695303642168 * $convert_mode*$convert_mode
	 }*/
	}
	,
	function "Gaussian Blur" {
		takes Det(0.594603811402548 + 1.0087098902561617e-06)
		out Frame gb_out ,
		in Frame gb_in
	/*runs {
	 * 	var size = 1310720; //gb_in.s;
	 * 	const gb_kernel_x = 3;
	 * 	const gb_kernel_y = 3;
	 * 	gb_out = 0.594603811402548 + 1.0087098902561617e-06 * size 
	 * 	+-0.031630472768405006 * gb_kernel_x 
	 * 	+ -0.02226631575611655 * gb_kernel_y 
	 * 	+ -1.0977330155981235e-13 * size * size 
	 * 	+ 3.560159778712442e-08 * size * gb_kernel_x 
	 * 	+ 0.000000037661802810008614 * size * gb_kernel_y 
	 * 	+ 0.0010841815337399008 * gb_kernel_x * gb_kernel_x 
	 * 	+ 0.0003137983468730788 * gb_kernel_x * gb_kernel_y 
	 * 	+ 0.0004887238450612112 * gb_kernel_y*gb_kernel_y;
	 * 	//gb_out = 0.594603811402548 + 1.0087098902561617e-06 * x.s + -0.031630472768405006 * $gb_kernel_x + -0.02226631575611655 * $gb_kernel_y + -1.0977330155981235e-13 * x.s*x.s + 3.560159778712442e-08 * x.s * $gb_kernel_x + 3.7661802810008614e-08 * x.s * $gb_kernel_y + 0.0010841815337399008 * $gb_kernel_x*$gb_kernel_x + 0.0003137983468730788 * $gb_kernel_x * $gb_kernel_y + 0.0004887238450612112 * $gb_kernel_y*$gb_kernel_y)
	 }*/
	}
	,
	sensor "Video" {
		takes Det(33.333333333)
		out Frame out_nUEL
	} ,
	actuator "Output" {
		in Frame in_WLPz
	}
	connector con_2sMS "Video.out_nUEL" -> "Canny.canny_in" ,
	logicalConnector con_8ngK "Convert.conv_out" -> "Gaussian Blur.gb_in" 
	,
	connector con_ScJa "Gaussian Blur.gb_out" -> "Output.in_WLPz" ,
	logicalConnector con_Qrov "Canny.canny_out" -> "Convert.conv_in" }
}