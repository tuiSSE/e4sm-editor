/*
 * generated by XText 2.26.0
 */
package abcd.xy.metamodel.xtext.scoping

import abcd.xy.metamodel.abcd.DataNode
import abcd.xy.metamodel.abcd.Import
import abcd.xy.metamodel.abcd.Model
import abcd.xy.metamodel.abcd.core.CorePackage
import abcd.xy.metamodel.abcd.core.TypeSpecification
import abcd.xy.metamodel.abcd.abcdPackage
import abcd.xy.metamodel.abcd.execution.ExecutionPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ABcdScopeProvider extends AbstractABcdScopeProvider {
	val epackage = abcdPackage.eINSTANCE
	val exePackage = ExecutionPackage.eINSTANCE
	val cPackage = CorePackage.eINSTANCE

	override IScope getScope(EObject context, EReference reference) {
		//types "superType" scope
		if(context instanceof TypeSpecification && reference == CorePackage.Literals.TYPE_SPECIFICATION__SUPER_TYPE){
			val Model rootElement = EcoreUtil2.getRootContainer(context) as Model;
			//return Scopes.scopeFor((rootElement as Model).types.takeWhile[it != context])
	        //val candidates = EcoreUtil2.getAllContentsOfType(rootElement, TypeSpecification);
	        // All types specified here before this one
	        var candidates = rootElement.types.takeWhile[it != context].toList;
	        // Add all imported types
	        for (Import im : rootElement.imports){
	        	candidates.addAll(im.referencedModel.types)
	        }
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
		}
		
		//Pin/Datastore (DataNode) type scope
		if(context instanceof DataNode && reference == CorePackage.Literals.TYPED_ELEMENT__TYPE){
			val Model rootElement = EcoreUtil2.getRootContainer(context) as Model;
			//return Scopes.scopeFor((rootElement as Model).types.takeWhile[it != context])
	        //val candidates = EcoreUtil2.getAllContentsOfType(rootElement, TypeSpecification);
	        // All types specified here before this one
	        var candidates = rootElement.types.takeWhile[it != context].toList;
	        // Add all imported types
	        for (Import im : rootElement.imports){
	        	candidates.addAll(im.referencedModel.types)
	        }
	        // Create IEObjectDescriptions and puts them into an IScope instance
	        return Scopes.scopeFor(candidates);
		}
//		if (context instanceof Execution) {
//			if(reference instanceof Pin)
//			{
//				return Scopes.scopeFor((context.eContainer as Component).pins)
//			}
//		}
		return super.getScope(context, reference)
	}
}
