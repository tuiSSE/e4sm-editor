/************************************************************

	MeasureObj_Execution__thread__pool__in__use.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_int.h"
#include "MeasureObj_Execution__thread__pool__in__use.h"

MeasureObj_Execution__thread__pool__in__use* measure_Execution__thread__pool__in__use;

MeasureObj_Execution__thread__pool__in__use::MeasureObj_Execution__thread__pool__in__use(NetClass* net) : MeasureObj("Execution_thread_pool_in_use", net, true)
{
}

double MeasureObj_Execution__thread__pool__in__use::measure(double dt=-1)
{
	// Orig Expression: 4 - #Execution_thread_pool
	// C++  Expression: 4.0-#P000002
	Place *P000002 = net->getPlace("Execution_thread_pool");

	double rate = (4.0-P000002->getMarkingSize());

	return rate;
}

void MeasureObj_Execution__thread__pool__in__use::accum(const Binding *binding, double weight) {}
MeasureObj_Execution__thread__pool__in__use::~MeasureObj_Execution__thread__pool__in__use()
{
}

