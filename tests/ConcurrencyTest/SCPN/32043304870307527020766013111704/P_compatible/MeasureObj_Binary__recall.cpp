/************************************************************

	MeasureObj_Binary__recall.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_Data.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"
#include "MeasureObj_fsdf.h"
#include "MeasureObj_PlaceTP.h"

MeasureObj_Binary__recall* measure_Binary__recall;

MeasureObj_Binary__recall::MeasureObj_Binary__recall(NetClass* net) : MeasureObj("Binary_recall", net, false)
{
}

double MeasureObj_Binary__recall::measure(double dt=-1)
{
	// Orig Expression: #Binary_tp / (0.00000001 + #Binary_tp + #Binary_fn)
	// C++  Expression: #P000045/ ( 1.0E-8+#P000046+#P000047 ) 
	Place *P000045 = net->getPlace("Binary_tp");
	Place *P000046 = net->getPlace("Binary_tp");
	Place *P000047 = net->getPlace("Binary_fn");

	double rate = (P000045->getMarkingSize()/ ( 1.0E-8+P000046->getMarkingSize()+P000047->getMarkingSize() ) );

	return rate;
}

void MeasureObj_Binary__recall::accum(const Binding *binding, double weight) {}
MeasureObj_Binary__recall::~MeasureObj_Binary__recall()
{
}

