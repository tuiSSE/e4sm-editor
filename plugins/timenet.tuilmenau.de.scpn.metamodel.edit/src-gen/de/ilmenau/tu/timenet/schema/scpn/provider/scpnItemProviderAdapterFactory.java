/**
 */
package de.ilmenau.tu.timenet.schema.scpn.provider;

import de.ilmenau.tu.timenet.schema.scpn.util.scpnAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class scpnItemProviderAdapterFactory extends scpnAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public scpnItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.AddDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddDataTypeItemProvider addDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.AddDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddDataTypeAdapter() {
		if (addDataTypeItemProvider == null) {
			addDataTypeItemProvider = new AddDataTypeItemProvider(this);
		}

		return addDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ArcType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArcTypeItemProvider arcTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ArcType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArcTypeAdapter() {
		if (arcTypeItemProvider == null) {
			arcTypeItemProvider = new ArcTypeItemProvider(this);
		}

		return arcTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.CommentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentTypeItemProvider commentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.CommentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentTypeAdapter() {
		if (commentTypeItemProvider == null) {
			commentTypeItemProvider = new CommentTypeItemProvider(this);
		}

		return commentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ConnectorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorTypeItemProvider connectorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ConnectorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorTypeAdapter() {
		if (connectorTypeItemProvider == null) {
			connectorTypeItemProvider = new ConnectorTypeItemProvider(this);
		}

		return connectorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.DefinitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefinitionTypeItemProvider definitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.DefinitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefinitionTypeAdapter() {
		if (definitionTypeItemProvider == null) {
			definitionTypeItemProvider = new DefinitionTypeItemProvider(this);
		}

		return definitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.GraphicsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GraphicsTypeItemProvider graphicsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.GraphicsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGraphicsTypeAdapter() {
		if (graphicsTypeItemProvider == null) {
			graphicsTypeItemProvider = new GraphicsTypeItemProvider(this);
		}

		return graphicsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.HandleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HandleTypeItemProvider handleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.HandleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHandleTypeAdapter() {
		if (handleTypeItemProvider == null) {
			handleTypeItemProvider = new HandleTypeItemProvider(this);
		}

		return handleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ImmediateTransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImmediateTransitionTypeItemProvider immediateTransitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ImmediateTransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImmediateTransitionTypeAdapter() {
		if (immediateTransitionTypeItemProvider == null) {
			immediateTransitionTypeItemProvider = new ImmediateTransitionTypeItemProvider(this);
		}

		return immediateTransitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.InscriptionTextType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InscriptionTextTypeItemProvider inscriptionTextTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.InscriptionTextType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInscriptionTextTypeAdapter() {
		if (inscriptionTextTypeItemProvider == null) {
			inscriptionTextTypeItemProvider = new InscriptionTextTypeItemProvider(this);
		}

		return inscriptionTextTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.InscriptionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InscriptionTypeItemProvider inscriptionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.InscriptionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInscriptionTypeAdapter() {
		if (inscriptionTypeItemProvider == null) {
			inscriptionTypeItemProvider = new InscriptionTypeItemProvider(this);
		}

		return inscriptionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.LabelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelTypeItemProvider labelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.LabelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelTypeAdapter() {
		if (labelTypeItemProvider == null) {
			labelTypeItemProvider = new LabelTypeItemProvider(this);
		}

		return labelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.LibImportType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LibImportTypeItemProvider libImportTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.LibImportType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLibImportTypeAdapter() {
		if (libImportTypeItemProvider == null) {
			libImportTypeItemProvider = new LibImportTypeItemProvider(this);
		}

		return libImportTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.MeasureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasureTypeItemProvider measureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.MeasureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasureTypeAdapter() {
		if (measureTypeItemProvider == null) {
			measureTypeItemProvider = new MeasureTypeItemProvider(this);
		}

		return measureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ModuleImplementationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleImplementationTypeItemProvider moduleImplementationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ModuleImplementationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleImplementationTypeAdapter() {
		if (moduleImplementationTypeItemProvider == null) {
			moduleImplementationTypeItemProvider = new ModuleImplementationTypeItemProvider(this);
		}

		return moduleImplementationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ModuleInstanceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleInstanceTypeItemProvider moduleInstanceTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ModuleInstanceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleInstanceTypeAdapter() {
		if (moduleInstanceTypeItemProvider == null) {
			moduleInstanceTypeItemProvider = new ModuleInstanceTypeItemProvider(this);
		}

		return moduleInstanceTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ModulePinType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModulePinTypeItemProvider modulePinTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ModulePinType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModulePinTypeAdapter() {
		if (modulePinTypeItemProvider == null) {
			modulePinTypeItemProvider = new ModulePinTypeItemProvider(this);
		}

		return modulePinTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ModuleType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleTypeItemProvider moduleTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ModuleType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleTypeAdapter() {
		if (moduleTypeItemProvider == null) {
			moduleTypeItemProvider = new ModuleTypeItemProvider(this);
		}

		return moduleTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.NetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetTypeItemProvider netTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.NetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetTypeAdapter() {
		if (netTypeItemProvider == null) {
			netTypeItemProvider = new NetTypeItemProvider(this);
		}

		return netTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.NodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeTypeItemProvider nodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.NodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeTypeAdapter() {
		if (nodeTypeItemProvider == null) {
			nodeTypeItemProvider = new NodeTypeItemProvider(this);
		}

		return nodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ParameterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterTypeItemProvider parameterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ParameterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterTypeAdapter() {
		if (parameterTypeItemProvider == null) {
			parameterTypeItemProvider = new ParameterTypeItemProvider(this);
		}

		return parameterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ParameterValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterValueTypeItemProvider parameterValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ParameterValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterValueTypeAdapter() {
		if (parameterValueTypeItemProvider == null) {
			parameterValueTypeItemProvider = new ParameterValueTypeItemProvider(this);
		}

		return parameterValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.PlaceType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceTypeItemProvider placeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.PlaceType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceTypeAdapter() {
		if (placeTypeItemProvider == null) {
			placeTypeItemProvider = new PlaceTypeItemProvider(this);
		}

		return placeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.RecordTokentype} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RecordTokentypeItemProvider recordTokentypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.RecordTokentype}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRecordTokentypeAdapter() {
		if (recordTokentypeItemProvider == null) {
			recordTokentypeItemProvider = new RecordTokentypeItemProvider(this);
		}

		return recordTokentypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.ReplicationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReplicationTypeItemProvider replicationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.ReplicationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReplicationTypeAdapter() {
		if (replicationTypeItemProvider == null) {
			replicationTypeItemProvider = new ReplicationTypeItemProvider(this);
		}

		return replicationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.SCPNNet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SCPNNetItemProvider scpnNetItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.SCPNNet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSCPNNetAdapter() {
		if (scpnNetItemProvider == null) {
			scpnNetItemProvider = new SCPNNetItemProvider(this);
		}

		return scpnNetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.SubstitutionTransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstitutionTransitionTypeItemProvider substitutionTransitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.SubstitutionTransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstitutionTransitionTypeAdapter() {
		if (substitutionTransitionTypeItemProvider == null) {
			substitutionTransitionTypeItemProvider = new SubstitutionTransitionTypeItemProvider(this);
		}

		return substitutionTransitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.TextType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextTypeItemProvider textTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.TextType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextTypeAdapter() {
		if (textTypeItemProvider == null) {
			textTypeItemProvider = new TextTypeItemProvider(this);
		}

		return textTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.TimedTransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedTransitionTypeItemProvider timedTransitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.TimedTransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedTransitionTypeAdapter() {
		if (timedTransitionTypeItemProvider == null) {
			timedTransitionTypeItemProvider = new TimedTransitionTypeItemProvider(this);
		}

		return timedTransitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.TransitionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionTypeItemProvider transitionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.TransitionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionTypeAdapter() {
		if (transitionTypeItemProvider == null) {
			transitionTypeItemProvider = new TransitionTypeItemProvider(this);
		}

		return transitionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.ilmenau.tu.timenet.schema.scpn.TypedefType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedefTypeItemProvider typedefTypeItemProvider;

	/**
	 * This creates an adapter for a {@link de.ilmenau.tu.timenet.schema.scpn.TypedefType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedefTypeAdapter() {
		if (typedefTypeItemProvider == null) {
			typedefTypeItemProvider = new TypedefTypeItemProvider(this);
		}

		return typedefTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (addDataTypeItemProvider != null)
			addDataTypeItemProvider.dispose();
		if (arcTypeItemProvider != null)
			arcTypeItemProvider.dispose();
		if (attributeTypeItemProvider != null)
			attributeTypeItemProvider.dispose();
		if (commentTypeItemProvider != null)
			commentTypeItemProvider.dispose();
		if (connectorTypeItemProvider != null)
			connectorTypeItemProvider.dispose();
		if (definitionTypeItemProvider != null)
			definitionTypeItemProvider.dispose();
		if (documentRootItemProvider != null)
			documentRootItemProvider.dispose();
		if (graphicsTypeItemProvider != null)
			graphicsTypeItemProvider.dispose();
		if (handleTypeItemProvider != null)
			handleTypeItemProvider.dispose();
		if (immediateTransitionTypeItemProvider != null)
			immediateTransitionTypeItemProvider.dispose();
		if (inscriptionTextTypeItemProvider != null)
			inscriptionTextTypeItemProvider.dispose();
		if (inscriptionTypeItemProvider != null)
			inscriptionTypeItemProvider.dispose();
		if (labelTypeItemProvider != null)
			labelTypeItemProvider.dispose();
		if (libImportTypeItemProvider != null)
			libImportTypeItemProvider.dispose();
		if (measureTypeItemProvider != null)
			measureTypeItemProvider.dispose();
		if (moduleImplementationTypeItemProvider != null)
			moduleImplementationTypeItemProvider.dispose();
		if (moduleInstanceTypeItemProvider != null)
			moduleInstanceTypeItemProvider.dispose();
		if (modulePinTypeItemProvider != null)
			modulePinTypeItemProvider.dispose();
		if (moduleTypeItemProvider != null)
			moduleTypeItemProvider.dispose();
		if (netTypeItemProvider != null)
			netTypeItemProvider.dispose();
		if (nodeTypeItemProvider != null)
			nodeTypeItemProvider.dispose();
		if (parameterTypeItemProvider != null)
			parameterTypeItemProvider.dispose();
		if (parameterValueTypeItemProvider != null)
			parameterValueTypeItemProvider.dispose();
		if (placeTypeItemProvider != null)
			placeTypeItemProvider.dispose();
		if (recordTokentypeItemProvider != null)
			recordTokentypeItemProvider.dispose();
		if (replicationTypeItemProvider != null)
			replicationTypeItemProvider.dispose();
		if (scpnNetItemProvider != null)
			scpnNetItemProvider.dispose();
		if (substitutionTransitionTypeItemProvider != null)
			substitutionTransitionTypeItemProvider.dispose();
		if (textTypeItemProvider != null)
			textTypeItemProvider.dispose();
		if (timedTransitionTypeItemProvider != null)
			timedTransitionTypeItemProvider.dispose();
		if (transitionTypeItemProvider != null)
			transitionTypeItemProvider.dispose();
		if (typedefTypeItemProvider != null)
			typedefTypeItemProvider.dispose();
	}

}
