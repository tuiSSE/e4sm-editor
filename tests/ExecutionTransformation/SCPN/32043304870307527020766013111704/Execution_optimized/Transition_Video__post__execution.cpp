/************************************************************

	Transition_Video__post__execution.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Transition_Video__post__execution.h"

#include "MeasureObj_Execution__thread__pool__in__use.h"

Transition_Video__post__execution::Transition_Video__post__execution(int uniqueid, const char* name, NetClass* net, PlaceIdentMap places, string pagePath, double firingWeight, int priority, bool exp, bool takeFirst, bool isInfinite, bool hasLocalGuard) :
	Transition(uniqueid, name, net, places, pagePath, firingWeight, priority, exp, takeFirst, isInfinite, hasLocalGuard)
,
	x_Place ( *(net->getPlace( &places, "Video_executed"))),
	nona1_Place ( *(net->getPlace( &places, "Execution_thread_pool"))),
	nona2_Place ( *(net->getPlace( &places, "Video_out1")))
{
}

Transition_Video__post__execution::~Transition_Video__post__execution()
{
}

bool Transition_Video__post__execution::globalGuard()
{
	return true;
}
void Transition_Video__post__execution::initGlobalGuards()
{
}

void Transition_Video__post__execution::moveTokens(TokenList &binding)
{
	TokenList::iterator binding_it = binding.begin();

	SMARTPTR(Token_Data) token_x = UPCAST_MACRO(Token_Data)(*binding_it ++);
	x_Place.removeToken(token_x);

	{
		// Handle token 1 of 1

		// Generate Token: 0.0
		{
			SMARTPTR(Token_int) newToken_0;
			{
				// Orig Expression: 
				// C++  Expression: 0.0

				newToken_0 = NEW_MACRO(Token_int, Token_int((long)(0.0)));
			}
			nona1_Place.addToken(newToken_0);
		}

		// Generate Token: {}
		{
			SMARTPTR(Token_Data) newToken_0 = NEW_MACRO(Token_Data, Token_Data());
			nona2_Place.addToken(newToken_0);
		}
	}
}

TempBindingList* Transition_Video__post__execution::generateBindingList()
{
	TokenList* tok;
	TempBindingList* tempBindings =  new TempBindingList();

	const TokenList &x_tokenList = getPlaceMarking(x_Place);
	TokenList::const_iterator x_iterator;

	for (x_iterator=x_tokenList.begin(); x_iterator!=x_tokenList.end(); ++x_iterator) {
		SMARTPTR(Token_Data) token_x = UPCAST_MACRO(Token_Data)(*x_iterator);
		
		// Check nulls 
		if (token_x == 0) {
			continue;
		}
		
		{
			
			// Check nulls 
			
		}

		// All local guards passed:
		tok = new TokenList();
		tok->push_back(UPCAST_MACRO(Token_Data)(*x_iterator));
		tempBindings->push_back(tok);
		return tempBindings;
	}
	return tempBindings;
}

void Transition_Video__post__execution::log(TokenList &binding)
{
}

double Transition_Video__post__execution::display(TokenList &binding)
{
	return 0.0;
}

Seconds_T Transition_Video__post__execution::getFiringDelay(TokenList &binding) const
{
	return Transition::getFiringDelay(binding);
}

bool Transition_Video__post__execution::hasTimeguard() const
{
	return false;
}

Seconds_T Transition_Video__post__execution::Timeguard(const DateTime& now)
{
	return 0.0;
}

