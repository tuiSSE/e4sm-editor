/************************************************************

	MeasureObj_Binary__accuracy.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_Data.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"
#include "MeasureObj_fsdf.h"
#include "MeasureObj_PlaceTP.h"

MeasureObj_Binary__accuracy* measure_Binary__accuracy;

MeasureObj_Binary__accuracy::MeasureObj_Binary__accuracy(NetClass* net) : MeasureObj("Binary_accuracy", net, false)
{
}

double MeasureObj_Binary__accuracy::measure(double dt=-1)
{
	// Orig Expression: (#Binary_tp+ #Binary_tn) / (0.00000001 + #Binary_tp + #Binary_tn + #Binary_fp + #Binary_fn)
	// C++  Expression:  ( #P000030+#P000031 ) / ( 1.0E-8+#P000032+#P000033+#P000034+#P000035 ) 
	Place *P000030 = net->getPlace("Binary_tp");
	Place *P000031 = net->getPlace("Binary_tn");
	Place *P000032 = net->getPlace("Binary_tp");
	Place *P000033 = net->getPlace("Binary_tn");
	Place *P000034 = net->getPlace("Binary_fp");
	Place *P000035 = net->getPlace("Binary_fn");

	double rate = ( ( P000030->getMarkingSize()+P000031->getMarkingSize() ) / ( 1.0E-8+P000032->getMarkingSize()+P000033->getMarkingSize()+P000034->getMarkingSize()+P000035->getMarkingSize() ) );

	return rate;
}

void MeasureObj_Binary__accuracy::accum(const Binding *binding, double weight) {}
MeasureObj_Binary__accuracy::~MeasureObj_Binary__accuracy()
{
}

