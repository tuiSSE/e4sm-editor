/************************************************************

	MeasureObj_AReady.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_Data.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_AReady.h"
#include "MeasureObj_Act1Ready.h"
#include "MeasureObj_Act2Ready.h"
#include "MeasureObj_A3Ready.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"

MeasureObj_AReady* measure_AReady;

MeasureObj_AReady::MeasureObj_AReady(NetClass* net) : MeasureObj("AReady", net, true)
{
	firstTime = lastTime = 0;
	value = 0;
}

double MeasureObj_AReady::measure(double dt=-1)
{
	return value;
}

void MeasureObj_AReady::accum(const Binding *binding, double weight) {
	const DateTime &t = binding->getTime();
	double dt = t.FullDateTime() - lastTime;
	lastTime = t.FullDateTime();

	// Orig Expression: #A_executed
	// C++  Expression: #P000027
	Place *P000027 = net->getPlace("A_executed");

	const Transition *trans = binding->getBoundTransition();
	const TokenList *tokens = binding->getBoundTokens();

	double rate = (P000027->getMarkingSize());

	value += weight * dt * rate;
}

MeasureObj_AReady::~MeasureObj_AReady()
{
}

