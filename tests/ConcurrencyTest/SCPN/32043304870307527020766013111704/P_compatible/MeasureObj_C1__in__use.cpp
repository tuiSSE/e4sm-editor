/************************************************************

	MeasureObj_C1__in__use.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "Token_int.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"
#include "MeasureObj_fsdf.h"
#include "MeasureObj_PlaceTP.h"

MeasureObj_C1__in__use* measure_C1__in__use;

MeasureObj_C1__in__use::MeasureObj_C1__in__use(NetClass* net) : MeasureObj("C1_in_use", net, true)
{
	firstTime = lastTime = 0;
	value = 0;
}

double MeasureObj_C1__in__use::measure(double dt=-1)
{
	if(dt!=-1) return dt == 0 ? 0 : (value/dt);
	return lastTime == firstTime ? 0 : (value/(double)(lastTime - firstTime));
}

void MeasureObj_C1__in__use::accum(const Binding *binding, double weight) {
	const DateTime &t = binding->getTime();
	double dt = t.FullDateTime() - lastTime;
	lastTime = t.FullDateTime();

	// Orig Expression: 5 - #C1_sem
	// C++  Expression: 5.0-#P000023
	Place *P000023 = net->getPlace("C1_sem");

	const Transition *trans = binding->getBoundTransition();
	const TokenList *tokens = binding->getBoundTokens();

	double rate = (5.0-P000023->getMarkingSize());

	value += weight * dt * rate;
}

MeasureObj_C1__in__use::~MeasureObj_C1__in__use()
{
}

