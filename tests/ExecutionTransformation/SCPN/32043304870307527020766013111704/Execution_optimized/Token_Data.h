/************************************************************

	Token_Data.h  -  generated by CodeGenerator r$Rev$

************************************************************/

#ifndef TOKEN_Data_H_FILE
#define TOKEN_Data_H_FILE

#include "xercesc/parsers/XercesDOMParser.hpp"
#include "xercesc/dom/DOM.hpp"
#include "xercesc/sax/HandlerBase.hpp"
#include "xercesc/util/XMLString.hpp"
#include "xercesc/util/PlatformUtils.hpp"
#include "Token.h"
#include "Place.h"
#include "gmdb.h"


class Token_Data : public Token {
public:
	Token_Data();
	Token_Data(const Token_Data& Data, bool copyTransition);
	~Token_Data();
	Token_Data& operator= (const Token_Data& Data);
	const std::string getName() const {return "Data";}
	string const& get_n() const;
	void set_n(const string &n);
	long get_s() const;
	void set_s(long s);
	long get_l() const;
	void set_l(long l);
	DateTime const& get_gT() const;
	void set_gT(const DateTime &gT);
	bool get_d() const;
	void set_d(bool d);
	bool get_ood() const;
	void set_ood(bool ood);
	long get_tL() const;
	void set_tL(long tL);
	long get_gL() const;
	void set_gL(long gL);
	const std::string content() const;

	void readTokenData(XERCES_CPP_NAMESPACE_QUALIFIER DOMNode* node);
	static void addInitialTokens(Place* p);
	static void createTokensFromDB(NetClass* net, GMDB* connection, token_info_list &tokens, token_reference_list &refs);
private:
	string n;
	long s;
	long l;
	DateTime gT;
	bool d;
	bool ood;
	long tL;
	long gL;
};

#endif
