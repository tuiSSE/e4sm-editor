/************************************************************

	MeasureObj_fsdf.cpp  -  generated by CodeGenerator r$Rev$

************************************************************/

#include "Token_int.h"
#include "Token_bool.h"
#include "Token_real.h"
#include "Token_string.h"
#include "Token_DateTime.h"
#include "MeasureObj_C1__in__use.h"
#include "MeasureObj_Binary__accuracy.h"
#include "MeasureObj_Binary__specificity.h"
#include "MeasureObj_Binary__recall.h"
#include "MeasureObj_Binary__precision.h"
#include "MeasureObj_Binary__f1Score.h"
#include "MeasureObj_fsdf.h"
#include "MeasureObj_PlaceTP.h"

MeasureObj_fsdf* measure_fsdf;

MeasureObj_fsdf::MeasureObj_fsdf(NetClass* net) : MeasureObj("fsdf", net, true)
{
	firstTime = lastTime = 0;
	value = 0;
}

double MeasureObj_fsdf::measure(double dt=-1)
{
	return value;
}

void MeasureObj_fsdf::accum(const Binding *binding, double weight) {
	const DateTime &t = binding->getTime();
	double dt = t.FullDateTime() - lastTime;
	lastTime = t.FullDateTime();

	// Orig Expression: #Binary_ct_tp
	// C++  Expression: #T000063

	const Transition *trans = binding->getBoundTransition();
	const TokenList *tokens = binding->getBoundTokens();
	double T000063 = (trans == &net->getTransition("Binary_ct_tp") ? 1.0 : 0.0);

	double impulse = (T000063);

	value += weight * impulse;
}

MeasureObj_fsdf::~MeasureObj_fsdf()
{
}

