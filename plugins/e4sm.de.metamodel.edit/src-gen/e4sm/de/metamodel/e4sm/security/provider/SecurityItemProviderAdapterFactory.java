/**
 */
package e4sm.de.metamodel.e4sm.security.provider;

import e4sm.de.metamodel.e4sm.security.util.SecurityAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SecurityItemProviderAdapterFactory extends SecurityAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SecurityItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.AssetDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssetDefinitionItemProvider assetDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.AssetDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssetDefinitionAdapter() {
		if (assetDefinitionItemProvider == null) {
			assetDefinitionItemProvider = new AssetDefinitionItemProvider(this);
		}

		return assetDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.Confidentiality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfidentialityItemProvider confidentialityItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.Confidentiality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfidentialityAdapter() {
		if (confidentialityItemProvider == null) {
			confidentialityItemProvider = new ConfidentialityItemProvider(this);
		}

		return confidentialityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.Integrity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegrityItemProvider integrityItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.Integrity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegrityAdapter() {
		if (integrityItemProvider == null) {
			integrityItemProvider = new IntegrityItemProvider(this);
		}

		return integrityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.Availability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AvailabilityItemProvider availabilityItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.Availability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAvailabilityAdapter() {
		if (availabilityItemProvider == null) {
			availabilityItemProvider = new AvailabilityItemProvider(this);
		}

		return availabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.CVE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CVEItemProvider cveItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.CVE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCVEAdapter() {
		if (cveItemProvider == null) {
			cveItemProvider = new CVEItemProvider(this);
		}

		return cveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.CWE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CWEItemProvider cweItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.CWE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCWEAdapter() {
		if (cweItemProvider == null) {
			cweItemProvider = new CWEItemProvider(this);
		}

		return cweItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.ThreatCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThreatConditionItemProvider threatConditionItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.ThreatCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThreatConditionAdapter() {
		if (threatConditionItemProvider == null) {
			threatConditionItemProvider = new ThreatConditionItemProvider(this);
		}

		return threatConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.SecuritySpecification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecuritySpecificationItemProvider securitySpecificationItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.SecuritySpecification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecuritySpecificationAdapter() {
		if (securitySpecificationItemProvider == null) {
			securitySpecificationItemProvider = new SecuritySpecificationItemProvider(this);
		}

		return securitySpecificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link e4sm.de.metamodel.e4sm.security.KnownSecurityThreats} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KnownSecurityThreatsItemProvider knownSecurityThreatsItemProvider;

	/**
	 * This creates an adapter for a {@link e4sm.de.metamodel.e4sm.security.KnownSecurityThreats}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKnownSecurityThreatsAdapter() {
		if (knownSecurityThreatsItemProvider == null) {
			knownSecurityThreatsItemProvider = new KnownSecurityThreatsItemProvider(this);
		}

		return knownSecurityThreatsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (assetDefinitionItemProvider != null)
			assetDefinitionItemProvider.dispose();
		if (confidentialityItemProvider != null)
			confidentialityItemProvider.dispose();
		if (integrityItemProvider != null)
			integrityItemProvider.dispose();
		if (availabilityItemProvider != null)
			availabilityItemProvider.dispose();
		if (cveItemProvider != null)
			cveItemProvider.dispose();
		if (cweItemProvider != null)
			cweItemProvider.dispose();
		if (threatConditionItemProvider != null)
			threatConditionItemProvider.dispose();
		if (securitySpecificationItemProvider != null)
			securitySpecificationItemProvider.dispose();
		if (knownSecurityThreatsItemProvider != null)
			knownSecurityThreatsItemProvider.dispose();
	}

}
